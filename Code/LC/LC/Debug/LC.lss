
LC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00001aea  00001b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800228  00800228  00001ca6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cd1  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cce  00000000  00000000  00005b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bfa  00000000  00000000  00006867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00008464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c7  00000000  00000000  000088b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031bd  00000000  00000000  0000917b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000c338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__ctors_end>
       4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
       8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
       c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      48:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      60:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      64:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      68:	0f 01       	movw	r0, r30
      6a:	67 02       	muls	r22, r23
      6c:	77 02       	muls	r23, r23
      6e:	77 02       	muls	r23, r23
      70:	77 02       	muls	r23, r23
      72:	77 02       	muls	r23, r23
      74:	77 02       	muls	r23, r23
      76:	77 02       	muls	r23, r23
      78:	77 02       	muls	r23, r23
      7a:	77 02       	muls	r23, r23
      7c:	77 02       	muls	r23, r23
      7e:	77 02       	muls	r23, r23
      80:	77 02       	muls	r23, r23
      82:	77 02       	muls	r23, r23
      84:	3f 02       	muls	r19, r31
      86:	5f 02       	muls	r21, r31
      88:	e7 01       	movw	r28, r14
      8a:	ef 01       	movw	r28, r30
      8c:	f7 01       	movw	r30, r14
      8e:	ff 01       	movw	r30, r30
      90:	07 02       	muls	r16, r23
      92:	0f 02       	muls	r16, r31
      94:	17 02       	muls	r17, r23
      96:	1f 02       	muls	r17, r31
      98:	27 02       	muls	r18, r23
      9a:	2f 02       	muls	r18, r31
      9c:	47 02       	muls	r20, r23
      9e:	77 02       	muls	r23, r23
      a0:	57 02       	muls	r21, r23
      a2:	37 02       	muls	r19, r23
      a4:	4f 02       	muls	r20, r31
      a6:	77 02       	muls	r23, r23
      a8:	77 02       	muls	r23, r23
      aa:	17 01       	movw	r2, r14
      ac:	1f 01       	movw	r2, r30
      ae:	27 01       	movw	r4, r14
      b0:	2f 01       	movw	r4, r30
      b2:	37 01       	movw	r6, r14
      b4:	3f 01       	movw	r6, r30
      b6:	47 01       	movw	r8, r14
      b8:	4f 01       	movw	r8, r30
      ba:	57 01       	movw	r10, r14
      bc:	5f 01       	movw	r10, r30
      be:	67 01       	movw	r12, r14
      c0:	6f 01       	movw	r12, r30
      c2:	77 01       	movw	r14, r14
      c4:	7f 01       	movw	r14, r30
      c6:	87 01       	movw	r16, r14
      c8:	8f 01       	movw	r16, r30
      ca:	97 01       	movw	r18, r14
      cc:	9f 01       	movw	r18, r30
      ce:	a7 01       	movw	r20, r14
      d0:	af 01       	movw	r20, r30
      d2:	b7 01       	movw	r22, r14
      d4:	bf 01       	movw	r22, r30
      d6:	c7 01       	movw	r24, r14
      d8:	cf 01       	movw	r24, r30
      da:	d7 01       	movw	r26, r14
      dc:	df 01       	movw	r26, r30
      de:	77 02       	muls	r23, r23
      e0:	77 02       	muls	r23, r23
      e2:	77 02       	muls	r23, r23
      e4:	77 02       	muls	r23, r23
      e6:	77 02       	muls	r23, r23
      e8:	77 02       	muls	r23, r23
      ea:	77 02       	muls	r23, r23
      ec:	77 02       	muls	r23, r23
      ee:	77 02       	muls	r23, r23
      f0:	77 02       	muls	r23, r23
      f2:	77 02       	muls	r23, r23
      f4:	77 02       	muls	r23, r23
      f6:	77 02       	muls	r23, r23
      f8:	77 02       	muls	r23, r23
      fa:	77 02       	muls	r23, r23
      fc:	77 02       	muls	r23, r23
      fe:	77 02       	muls	r23, r23
     100:	77 02       	muls	r23, r23
     102:	77 02       	muls	r23, r23
     104:	77 02       	muls	r23, r23
     106:	77 02       	muls	r23, r23
     108:	77 02       	muls	r23, r23
     10a:	77 02       	muls	r23, r23
     10c:	77 02       	muls	r23, r23
     10e:	77 02       	muls	r23, r23
     110:	77 02       	muls	r23, r23
     112:	77 02       	muls	r23, r23
     114:	77 02       	muls	r23, r23
     116:	77 02       	muls	r23, r23
     118:	77 02       	muls	r23, r23
     11a:	77 02       	muls	r23, r23
     11c:	77 02       	muls	r23, r23
     11e:	77 02       	muls	r23, r23
     120:	6f 02       	muls	r22, r31
     122:	73 05       	cpc	r23, r3
     124:	78 05       	cpc	r23, r8
     126:	7d 05       	cpc	r23, r13
     128:	82 05       	cpc	r24, r2
     12a:	87 05       	cpc	r24, r7
     12c:	8c 05       	cpc	r24, r12
     12e:	91 05       	cpc	r25, r1
     130:	96 05       	cpc	r25, r6
     132:	9b 05       	cpc	r25, r11
     134:	a0 05       	cpc	r26, r0
     136:	a5 05       	cpc	r26, r5
     138:	aa 05       	cpc	r26, r10

0000013a <__ctors_end>:
     13a:	11 24       	eor	r1, r1
     13c:	1f be       	out	0x3f, r1	; 63
     13e:	cf ef       	ldi	r28, 0xFF	; 255
     140:	d8 e0       	ldi	r29, 0x08	; 8
     142:	de bf       	out	0x3e, r29	; 62
     144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	ea ee       	ldi	r30, 0xEA	; 234
     14e:	fa e1       	ldi	r31, 0x1A	; 26
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
     152:	05 90       	lpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a8 32       	cpi	r26, 0x28	; 40
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
     15c:	22 e0       	ldi	r18, 0x02	; 2
     15e:	a8 e2       	ldi	r26, 0x28	; 40
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	ad 32       	cpi	r26, 0x2D	; 45
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
     16c:	0e 94 cf 0b 	call	0x179e	; 0x179e <main>
     170:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <_exit>

00000174 <__bad_interrupt>:
     174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <clk_period>:
#include "Display.h"

/* Display data driving SCLK function */
void clk_period(void)
{
	PORTC |= (1 << CLK);
     178:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17a:	85 e0       	ldi	r24, 0x05	; 5
     17c:	8a 95       	dec	r24
     17e:	f1 f7       	brne	.-4      	; 0x17c <clk_period+0x4>
     180:	00 00       	nop
	_delay_us(2);
	PORTC &= ~(1 << CLK);
     182:	42 98       	cbi	0x08, 2	; 8
     184:	85 e0       	ldi	r24, 0x05	; 5
     186:	8a 95       	dec	r24
     188:	f1 f7       	brne	.-4      	; 0x186 <clk_period+0xe>
     18a:	00 00       	nop
     18c:	08 95       	ret

0000018e <parallel_to_serial_matrix>:
	_delay_us(2);
}

/* Parallel character data to serial conversion (Serial 3-Wire interface purposes) */
void parallel_to_serial_matrix(uint8_t par_register)
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	d8 2f       	mov	r29, r24
     194:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t bits_loop = 0; bits_loop < 8; bits_loop++)
	{
		if (par_register & 0x80) { PORTC |= ( 1 << DIN); } // If MSB of current par_register '1' Then put '1' on DIN.
     196:	dd 23       	and	r29, r29
     198:	14 f4       	brge	.+4      	; 0x19e <parallel_to_serial_matrix+0x10>
     19a:	40 9a       	sbi	0x08, 0	; 8
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <parallel_to_serial_matrix+0x12>
		else { PORTC &= ~(1 << DIN); }
     19e:	40 98       	cbi	0x08, 0	; 8
		clk_period();
     1a0:	0e 94 bc 00 	call	0x178	; 0x178 <clk_period>
		par_register <<= 1; // Our transfer is MSB-first based, so we have to shift register left for every cycle.
     1a4:	dd 0f       	add	r29, r29
     1a6:	c1 50       	subi	r28, 0x01	; 1
}

/* Parallel character data to serial conversion (Serial 3-Wire interface purposes) */
void parallel_to_serial_matrix(uint8_t par_register)
{
	for (uint8_t bits_loop = 0; bits_loop < 8; bits_loop++)
     1a8:	b1 f7       	brne	.-20     	; 0x196 <parallel_to_serial_matrix+0x8>
		if (par_register & 0x80) { PORTC |= ( 1 << DIN); } // If MSB of current par_register '1' Then put '1' on DIN.
		else { PORTC &= ~(1 << DIN); }
		clk_period();
		par_register <<= 1; // Our transfer is MSB-first based, so we have to shift register left for every cycle.
	}
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <transmit_to_matrix>:

/* Transmit desired data to LED matrix function */
void transmit_to_matrix(uint8_t ax, uint8_t bx, uint8_t cx, uint8_t dx, uint8_t ex) // Here, we receive all values that we'll want to transmit - (index defines number of row).
{
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <transmit_to_matrix+0xe>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <transmit_to_matrix+0x10>
     1c0:	1f 92       	push	r1
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t pre_matrix[5];
	pre_matrix[0] = ax;
     1c6:	89 83       	std	Y+1, r24	; 0x01
	pre_matrix[1] = bx;
     1c8:	6a 83       	std	Y+2, r22	; 0x02
	pre_matrix[2] = cx;
     1ca:	4b 83       	std	Y+3, r20	; 0x03
	pre_matrix[3] = dx;
     1cc:	2c 83       	std	Y+4, r18	; 0x04
	pre_matrix[4] = ex;
     1ce:	0d 83       	std	Y+5, r16	; 0x05
     1d0:	8e 01       	movw	r16, r28
     1d2:	0f 5f       	subi	r16, 0xFF	; 255
     1d4:	1f 4f       	sbci	r17, 0xFF	; 255
     1d6:	7e 01       	movw	r14, r28
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	e8 0e       	add	r14, r24
     1dc:	f1 1c       	adc	r15, r1
	
	for (uint8_t array_loop = 0; array_loop < 5; array_loop++) //Total 5 rows.
	{
		
		parallel_to_serial_matrix(pre_matrix[array_loop]);
     1de:	f8 01       	movw	r30, r16
     1e0:	81 91       	ld	r24, Z+
     1e2:	8f 01       	movw	r16, r30
     1e4:	0e 94 c7 00 	call	0x18e	; 0x18e <parallel_to_serial_matrix>
	pre_matrix[1] = bx;
	pre_matrix[2] = cx;
	pre_matrix[3] = dx;
	pre_matrix[4] = ex;
	
	for (uint8_t array_loop = 0; array_loop < 5; array_loop++) //Total 5 rows.
     1e8:	0e 15       	cp	r16, r14
     1ea:	1f 05       	cpc	r17, r15
     1ec:	c1 f7       	brne	.-16     	; 0x1de <transmit_to_matrix+0x2e>
	{
		
		parallel_to_serial_matrix(pre_matrix[array_loop]);
	}
}
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	ff 90       	pop	r15
     202:	ef 90       	pop	r14
     204:	08 95       	ret

00000206 <Print_Character>:

/* Create single character appropriate for single LED display from a input ASCII character */ 
void Print_Character(char sent_character) 
{
     206:	0f 93       	push	r16
	switch(sent_character) //Lower-case & Upper-case letters.
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	fc 01       	movw	r30, r24
     20c:	b0 97       	sbiw	r30, 0x20	; 32
     20e:	ed 35       	cpi	r30, 0x5D	; 93
     210:	f1 05       	cpc	r31, r1
     212:	08 f0       	brcs	.+2      	; 0x216 <Print_Character+0x10>
     214:	6c c1       	rjmp	.+728    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     216:	ec 5c       	subi	r30, 0xCC	; 204
     218:	ff 4f       	sbci	r31, 0xFF	; 255
     21a:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__tablejump2__>
			case 'w':
			case 'x':
			case 'y':
			case 'z':
			*/ 
			case ' ': transmit_to_matrix(0x00,0x00,0x00,0x00,0x00); break;
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     22c:	67 c1       	rjmp	.+718    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'A': transmit_to_matrix(0x7E,0x09,0x09,0x09,0x7E); break;
     22e:	0e e7       	ldi	r16, 0x7E	; 126
     230:	29 e0       	ldi	r18, 0x09	; 9
     232:	49 e0       	ldi	r20, 0x09	; 9
     234:	69 e0       	ldi	r22, 0x09	; 9
     236:	8e e7       	ldi	r24, 0x7E	; 126
     238:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     23c:	5f c1       	rjmp	.+702    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'B': transmit_to_matrix(0x7F,0x49,0x49,0x49,0x76); break;
     23e:	06 e7       	ldi	r16, 0x76	; 118
     240:	29 e4       	ldi	r18, 0x49	; 73
     242:	49 e4       	ldi	r20, 0x49	; 73
     244:	69 e4       	ldi	r22, 0x49	; 73
     246:	8f e7       	ldi	r24, 0x7F	; 127
     248:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     24c:	57 c1       	rjmp	.+686    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'C': transmit_to_matrix(0x3E,0x41,0x41,0x41,0x22); break;
     24e:	02 e2       	ldi	r16, 0x22	; 34
     250:	21 e4       	ldi	r18, 0x41	; 65
     252:	41 e4       	ldi	r20, 0x41	; 65
     254:	61 e4       	ldi	r22, 0x41	; 65
     256:	8e e3       	ldi	r24, 0x3E	; 62
     258:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     25c:	4f c1       	rjmp	.+670    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'D': transmit_to_matrix(0x7F,0x41,0x41,0x41,0x7E); break;
     25e:	0e e7       	ldi	r16, 0x7E	; 126
     260:	21 e4       	ldi	r18, 0x41	; 65
     262:	41 e4       	ldi	r20, 0x41	; 65
     264:	61 e4       	ldi	r22, 0x41	; 65
     266:	8f e7       	ldi	r24, 0x7F	; 127
     268:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     26c:	47 c1       	rjmp	.+654    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'E': transmit_to_matrix(0x7F,0x49,0x49,0x49,0x41); break;
     26e:	01 e4       	ldi	r16, 0x41	; 65
     270:	29 e4       	ldi	r18, 0x49	; 73
     272:	49 e4       	ldi	r20, 0x49	; 73
     274:	69 e4       	ldi	r22, 0x49	; 73
     276:	8f e7       	ldi	r24, 0x7F	; 127
     278:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     27c:	3f c1       	rjmp	.+638    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'F': transmit_to_matrix(0x7F,0x09,0x09,0x09,0x01); break;
     27e:	01 e0       	ldi	r16, 0x01	; 1
     280:	29 e0       	ldi	r18, 0x09	; 9
     282:	49 e0       	ldi	r20, 0x09	; 9
     284:	69 e0       	ldi	r22, 0x09	; 9
     286:	8f e7       	ldi	r24, 0x7F	; 127
     288:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     28c:	37 c1       	rjmp	.+622    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'G': transmit_to_matrix(0x7E,0x41,0x49,0x49,0x39); break;
     28e:	09 e3       	ldi	r16, 0x39	; 57
     290:	29 e4       	ldi	r18, 0x49	; 73
     292:	49 e4       	ldi	r20, 0x49	; 73
     294:	61 e4       	ldi	r22, 0x41	; 65
     296:	8e e7       	ldi	r24, 0x7E	; 126
     298:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     29c:	2f c1       	rjmp	.+606    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'H': transmit_to_matrix(0x7F,0x08,0x08,0x08,0x7F); break;
     29e:	0f e7       	ldi	r16, 0x7F	; 127
     2a0:	28 e0       	ldi	r18, 0x08	; 8
     2a2:	48 e0       	ldi	r20, 0x08	; 8
     2a4:	68 e0       	ldi	r22, 0x08	; 8
     2a6:	8f e7       	ldi	r24, 0x7F	; 127
     2a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     2ac:	27 c1       	rjmp	.+590    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'I': transmit_to_matrix(0x00,0x41,0x7F,0x41,0x00); break;
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	21 e4       	ldi	r18, 0x41	; 65
     2b2:	4f e7       	ldi	r20, 0x7F	; 127
     2b4:	61 e4       	ldi	r22, 0x41	; 65
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     2bc:	1f c1       	rjmp	.+574    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'J': transmit_to_matrix(0x00,0x20,0x40,0x40,0x7F); break;
     2be:	0f e7       	ldi	r16, 0x7F	; 127
     2c0:	20 e4       	ldi	r18, 0x40	; 64
     2c2:	40 e4       	ldi	r20, 0x40	; 64
     2c4:	60 e2       	ldi	r22, 0x20	; 32
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     2cc:	17 c1       	rjmp	.+558    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'K': transmit_to_matrix(0x7F,0x08,0x14,0x22,0x41); break;
     2ce:	01 e4       	ldi	r16, 0x41	; 65
     2d0:	22 e2       	ldi	r18, 0x22	; 34
     2d2:	44 e1       	ldi	r20, 0x14	; 20
     2d4:	68 e0       	ldi	r22, 0x08	; 8
     2d6:	8f e7       	ldi	r24, 0x7F	; 127
     2d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     2dc:	0f c1       	rjmp	.+542    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'L': transmit_to_matrix(0x7F,0x40,0x40,0x40,0x40); break;
     2de:	00 e4       	ldi	r16, 0x40	; 64
     2e0:	20 e4       	ldi	r18, 0x40	; 64
     2e2:	40 e4       	ldi	r20, 0x40	; 64
     2e4:	60 e4       	ldi	r22, 0x40	; 64
     2e6:	8f e7       	ldi	r24, 0x7F	; 127
     2e8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     2ec:	07 c1       	rjmp	.+526    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'M': transmit_to_matrix(0x7F,0x02,0x04,0x02,0x7F); break;
     2ee:	0f e7       	ldi	r16, 0x7F	; 127
     2f0:	22 e0       	ldi	r18, 0x02	; 2
     2f2:	44 e0       	ldi	r20, 0x04	; 4
     2f4:	62 e0       	ldi	r22, 0x02	; 2
     2f6:	8f e7       	ldi	r24, 0x7F	; 127
     2f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     2fc:	ff c0       	rjmp	.+510    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'N': transmit_to_matrix(0x7F,0x04,0x08,0x10,0x7F); break;
     2fe:	0f e7       	ldi	r16, 0x7F	; 127
     300:	20 e1       	ldi	r18, 0x10	; 16
     302:	48 e0       	ldi	r20, 0x08	; 8
     304:	64 e0       	ldi	r22, 0x04	; 4
     306:	8f e7       	ldi	r24, 0x7F	; 127
     308:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     30c:	f7 c0       	rjmp	.+494    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'O': transmit_to_matrix(0x3E,0x41,0x41,0x41,0x3E); break;
     30e:	0e e3       	ldi	r16, 0x3E	; 62
     310:	21 e4       	ldi	r18, 0x41	; 65
     312:	41 e4       	ldi	r20, 0x41	; 65
     314:	61 e4       	ldi	r22, 0x41	; 65
     316:	8e e3       	ldi	r24, 0x3E	; 62
     318:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     31c:	ef c0       	rjmp	.+478    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'P': transmit_to_matrix(0x7F,0x09,0x09,0x09,0x07); break;
     31e:	07 e0       	ldi	r16, 0x07	; 7
     320:	29 e0       	ldi	r18, 0x09	; 9
     322:	49 e0       	ldi	r20, 0x09	; 9
     324:	69 e0       	ldi	r22, 0x09	; 9
     326:	8f e7       	ldi	r24, 0x7F	; 127
     328:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     32c:	e7 c0       	rjmp	.+462    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'Q': transmit_to_matrix(0x3E,0x41,0x51,0x61,0x7E); break;
     32e:	0e e7       	ldi	r16, 0x7E	; 126
     330:	21 e6       	ldi	r18, 0x61	; 97
     332:	41 e5       	ldi	r20, 0x51	; 81
     334:	61 e4       	ldi	r22, 0x41	; 65
     336:	8e e3       	ldi	r24, 0x3E	; 62
     338:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     33c:	df c0       	rjmp	.+446    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'R': transmit_to_matrix(0x7F,0x09,0x19,0x29,0x46); break;
     33e:	06 e4       	ldi	r16, 0x46	; 70
     340:	29 e2       	ldi	r18, 0x29	; 41
     342:	49 e1       	ldi	r20, 0x19	; 25
     344:	69 e0       	ldi	r22, 0x09	; 9
     346:	8f e7       	ldi	r24, 0x7F	; 127
     348:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     34c:	d7 c0       	rjmp	.+430    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'S': transmit_to_matrix(0x4F,0x49,0x49,0x49,0x79); break;
     34e:	09 e7       	ldi	r16, 0x79	; 121
     350:	29 e4       	ldi	r18, 0x49	; 73
     352:	49 e4       	ldi	r20, 0x49	; 73
     354:	69 e4       	ldi	r22, 0x49	; 73
     356:	8f e4       	ldi	r24, 0x4F	; 79
     358:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     35c:	cf c0       	rjmp	.+414    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'T': transmit_to_matrix(0x01,0x01,0x7F,0x01,0x01); break; 
     35e:	01 e0       	ldi	r16, 0x01	; 1
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	4f e7       	ldi	r20, 0x7F	; 127
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     36c:	c7 c0       	rjmp	.+398    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'U': transmit_to_matrix(0x3F,0x40,0x40,0x40,0x3F); break;
     36e:	0f e3       	ldi	r16, 0x3F	; 63
     370:	20 e4       	ldi	r18, 0x40	; 64
     372:	40 e4       	ldi	r20, 0x40	; 64
     374:	60 e4       	ldi	r22, 0x40	; 64
     376:	8f e3       	ldi	r24, 0x3F	; 63
     378:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     37c:	bf c0       	rjmp	.+382    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'V': transmit_to_matrix(0x1F,0x20,0x40,0x20,0x1F); break;
     37e:	0f e1       	ldi	r16, 0x1F	; 31
     380:	20 e2       	ldi	r18, 0x20	; 32
     382:	40 e4       	ldi	r20, 0x40	; 64
     384:	60 e2       	ldi	r22, 0x20	; 32
     386:	8f e1       	ldi	r24, 0x1F	; 31
     388:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     38c:	b7 c0       	rjmp	.+366    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'W': transmit_to_matrix(0x3F,0x40,0x30,0x40,0x3F); break;
     38e:	0f e3       	ldi	r16, 0x3F	; 63
     390:	20 e4       	ldi	r18, 0x40	; 64
     392:	40 e3       	ldi	r20, 0x30	; 48
     394:	60 e4       	ldi	r22, 0x40	; 64
     396:	8f e3       	ldi	r24, 0x3F	; 63
     398:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     39c:	af c0       	rjmp	.+350    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'X': transmit_to_matrix(0x63,0x14,0x08,0x14,0x63); break;
     39e:	03 e6       	ldi	r16, 0x63	; 99
     3a0:	24 e1       	ldi	r18, 0x14	; 20
     3a2:	48 e0       	ldi	r20, 0x08	; 8
     3a4:	64 e1       	ldi	r22, 0x14	; 20
     3a6:	83 e6       	ldi	r24, 0x63	; 99
     3a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     3ac:	a7 c0       	rjmp	.+334    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'Y': transmit_to_matrix(0x07,0x08,0x78,0x08,0x07); break;
     3ae:	07 e0       	ldi	r16, 0x07	; 7
     3b0:	28 e0       	ldi	r18, 0x08	; 8
     3b2:	48 e7       	ldi	r20, 0x78	; 120
     3b4:	68 e0       	ldi	r22, 0x08	; 8
     3b6:	87 e0       	ldi	r24, 0x07	; 7
     3b8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     3bc:	9f c0       	rjmp	.+318    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case 'Z': transmit_to_matrix(0x61,0x51,0x49,0x45,0x43);	break;
     3be:	03 e4       	ldi	r16, 0x43	; 67
     3c0:	25 e4       	ldi	r18, 0x45	; 69
     3c2:	49 e4       	ldi	r20, 0x49	; 73
     3c4:	61 e5       	ldi	r22, 0x51	; 81
     3c6:	81 e6       	ldi	r24, 0x61	; 97
     3c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     3cc:	97 c0       	rjmp	.+302    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			
			case '0': transmit_to_matrix(0x3E,0x41,0x41,0x41,0x3E); break;
     3ce:	0e e3       	ldi	r16, 0x3E	; 62
     3d0:	21 e4       	ldi	r18, 0x41	; 65
     3d2:	41 e4       	ldi	r20, 0x41	; 65
     3d4:	61 e4       	ldi	r22, 0x41	; 65
     3d6:	8e e3       	ldi	r24, 0x3E	; 62
     3d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     3dc:	8f c0       	rjmp	.+286    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '1': transmit_to_matrix(0x00,0x00,0x04,0x02,0x7F); break;
     3de:	0f e7       	ldi	r16, 0x7F	; 127
     3e0:	22 e0       	ldi	r18, 0x02	; 2
     3e2:	44 e0       	ldi	r20, 0x04	; 4
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     3ec:	87 c0       	rjmp	.+270    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '2': transmit_to_matrix(0x46,0x61,0x51,0x49,0x46); break;
     3ee:	06 e4       	ldi	r16, 0x46	; 70
     3f0:	29 e4       	ldi	r18, 0x49	; 73
     3f2:	41 e5       	ldi	r20, 0x51	; 81
     3f4:	61 e6       	ldi	r22, 0x61	; 97
     3f6:	86 e4       	ldi	r24, 0x46	; 70
     3f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     3fc:	7f c0       	rjmp	.+254    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '3': transmit_to_matrix(0x22,0x41,0x49,0x49,0x36); break;
     3fe:	06 e3       	ldi	r16, 0x36	; 54
     400:	29 e4       	ldi	r18, 0x49	; 73
     402:	49 e4       	ldi	r20, 0x49	; 73
     404:	61 e4       	ldi	r22, 0x41	; 65
     406:	82 e2       	ldi	r24, 0x22	; 34
     408:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     40c:	77 c0       	rjmp	.+238    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '4': transmit_to_matrix(0x18,0x14,0x12,0x7F,0x10); break;
     40e:	00 e1       	ldi	r16, 0x10	; 16
     410:	2f e7       	ldi	r18, 0x7F	; 127
     412:	42 e1       	ldi	r20, 0x12	; 18
     414:	64 e1       	ldi	r22, 0x14	; 20
     416:	88 e1       	ldi	r24, 0x18	; 24
     418:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     41c:	6f c0       	rjmp	.+222    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '5': transmit_to_matrix(0x27,0x45,0x45,0x45,0x39); break;
     41e:	09 e3       	ldi	r16, 0x39	; 57
     420:	25 e4       	ldi	r18, 0x45	; 69
     422:	45 e4       	ldi	r20, 0x45	; 69
     424:	65 e4       	ldi	r22, 0x45	; 69
     426:	87 e2       	ldi	r24, 0x27	; 39
     428:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     42c:	67 c0       	rjmp	.+206    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '6': transmit_to_matrix(0x3E,0x49,0x49,0x49,0x32); break;
     42e:	02 e3       	ldi	r16, 0x32	; 50
     430:	29 e4       	ldi	r18, 0x49	; 73
     432:	49 e4       	ldi	r20, 0x49	; 73
     434:	69 e4       	ldi	r22, 0x49	; 73
     436:	8e e3       	ldi	r24, 0x3E	; 62
     438:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     43c:	5f c0       	rjmp	.+190    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '7': transmit_to_matrix(0x01,0x01,0x79,0x05,0x03); break;
     43e:	03 e0       	ldi	r16, 0x03	; 3
     440:	25 e0       	ldi	r18, 0x05	; 5
     442:	49 e7       	ldi	r20, 0x79	; 121
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     44c:	57 c0       	rjmp	.+174    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '8': transmit_to_matrix(0x36,0x49,0x49,0x49,0x36); break;
     44e:	06 e3       	ldi	r16, 0x36	; 54
     450:	29 e4       	ldi	r18, 0x49	; 73
     452:	49 e4       	ldi	r20, 0x49	; 73
     454:	69 e4       	ldi	r22, 0x49	; 73
     456:	86 e3       	ldi	r24, 0x36	; 54
     458:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     45c:	4f c0       	rjmp	.+158    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '9': transmit_to_matrix(0x06,0x49,0x49,0x49,0x3E); break;
     45e:	0e e3       	ldi	r16, 0x3E	; 62
     460:	29 e4       	ldi	r18, 0x49	; 73
     462:	49 e4       	ldi	r20, 0x49	; 73
     464:	69 e4       	ldi	r22, 0x49	; 73
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     46c:	47 c0       	rjmp	.+142    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			
			case '=': transmit_to_matrix(0x24,0x24,0x24,0x24,0x24); break;
     46e:	04 e2       	ldi	r16, 0x24	; 36
     470:	24 e2       	ldi	r18, 0x24	; 36
     472:	44 e2       	ldi	r20, 0x24	; 36
     474:	64 e2       	ldi	r22, 0x24	; 36
     476:	84 e2       	ldi	r24, 0x24	; 36
     478:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     47c:	3f c0       	rjmp	.+126    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '.': transmit_to_matrix(0x00,0x60,0x60,0x00,0x00); break;
     47e:	00 e0       	ldi	r16, 0x00	; 0
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	40 e6       	ldi	r20, 0x60	; 96
     484:	60 e6       	ldi	r22, 0x60	; 96
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     48c:	37 c0       	rjmp	.+110    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case ':': transmit_to_matrix(0x00,0x66,0x66,0x00,0x00); break;	
     48e:	00 e0       	ldi	r16, 0x00	; 0
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	46 e6       	ldi	r20, 0x66	; 102
     494:	66 e6       	ldi	r22, 0x66	; 102
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     49c:	2f c0       	rjmp	.+94     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '>': transmit_to_matrix(0x00,0x41,0x22,0x14,0x08); break;	
     49e:	08 e0       	ldi	r16, 0x08	; 8
     4a0:	24 e1       	ldi	r18, 0x14	; 20
     4a2:	42 e2       	ldi	r20, 0x22	; 34
     4a4:	61 e4       	ldi	r22, 0x41	; 65
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     4ac:	27 c0       	rjmp	.+78     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '<': transmit_to_matrix(0x08,0x14,0x22,0x41,0x00); break;
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	21 e4       	ldi	r18, 0x41	; 65
     4b2:	42 e2       	ldi	r20, 0x22	; 34
     4b4:	64 e1       	ldi	r22, 0x14	; 20
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     4bc:	1f c0       	rjmp	.+62     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '/': transmit_to_matrix(0x20,0x10,0x08,0x04,0x02); break;
     4be:	02 e0       	ldi	r16, 0x02	; 2
     4c0:	24 e0       	ldi	r18, 0x04	; 4
     4c2:	48 e0       	ldi	r20, 0x08	; 8
     4c4:	60 e1       	ldi	r22, 0x10	; 16
     4c6:	80 e2       	ldi	r24, 0x20	; 32
     4c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     4cc:	17 c0       	rjmp	.+46     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '!': transmit_to_matrix(0x00,0x00,0x5F,0x00,0x00); break;
     4ce:	00 e0       	ldi	r16, 0x00	; 0
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	4f e5       	ldi	r20, 0x5F	; 95
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     4dc:	0f c0       	rjmp	.+30     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			case '|': transmit_to_matrix(0x00,0x00,0x7F,0x00,0x00); break;
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	4f e7       	ldi	r20, 0x7F	; 127
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
							
			default: transmit_to_matrix(0x63,0x14,0x08,0x14,0x63); break;
     4ee:	03 e6       	ldi	r16, 0x63	; 99
     4f0:	24 e1       	ldi	r18, 0x14	; 20
     4f2:	48 e0       	ldi	r20, 0x08	; 8
     4f4:	64 e1       	ldi	r22, 0x14	; 20
     4f6:	83 e6       	ldi	r24, 0x63	; 99
     4f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmit_to_matrix>
		}
}
     4fc:	0f 91       	pop	r16
     4fe:	08 95       	ret

00000500 <print_string>:

/* Convert and transmit array of ASCII characters to the displays */
void print_string(char string_array[])
{
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
	for (uint8_t character_loop = 0; character_loop < strlen(string_array); character_loop++)
     508:	10 e0       	ldi	r17, 0x00	; 0
     50a:	07 c0       	rjmp	.+14     	; 0x51a <print_string+0x1a>
	{
		Print_Character(string_array[character_loop]);
     50c:	fe 01       	movw	r30, r28
     50e:	e8 0f       	add	r30, r24
     510:	f9 1f       	adc	r31, r25
     512:	80 81       	ld	r24, Z
     514:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
}

/* Convert and transmit array of ASCII characters to the displays */
void print_string(char string_array[])
{
	for (uint8_t character_loop = 0; character_loop < strlen(string_array); character_loop++)
     518:	1f 5f       	subi	r17, 0xFF	; 255
     51a:	81 2f       	mov	r24, r17
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	fe 01       	movw	r30, r28
     520:	01 90       	ld	r0, Z+
     522:	00 20       	and	r0, r0
     524:	e9 f7       	brne	.-6      	; 0x520 <print_string+0x20>
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	ec 1b       	sub	r30, r28
     52a:	fd 0b       	sbc	r31, r29
     52c:	8e 17       	cp	r24, r30
     52e:	9f 07       	cpc	r25, r31
     530:	68 f3       	brcs	.-38     	; 0x50c <print_string+0xc>
	{
		Print_Character(string_array[character_loop]);
	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	08 95       	ret

0000053a <Init_Display>:

/* LED matrices display initialization sequence */
void Init_Display(void)
{
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
	PORTC |= (1 << nCE);	// nCE Should be HIGH to make Stable operation.
     542:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= ~(1 << CLK);   // CLK to LOW
     544:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	80 e7       	ldi	r24, 0x70	; 112
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <Init_Display+0x12>
     554:	00 c0       	rjmp	.+0      	; 0x556 <Init_Display+0x1c>
     556:	00 00       	nop
	_delay_ms(100);			// Wait for Bypass caps full-charge.
	PORTC &= ~(1 << RS);
     558:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << DIN); // Write Zeros to dot register.
     55a:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1 << nCE); // Start transmitting.
     55c:	43 98       	cbi	0x08, 3	; 8
     55e:	c0 e4       	ldi	r28, 0x40	; 64
     560:	d1 e0       	ldi	r29, 0x01	; 1

	for (uint16_t i = 0; i < total_LEDS_number; i++) { clk_period(); }
     562:	0e 94 bc 00 	call	0x178	; 0x178 <clk_period>
     566:	21 97       	sbiw	r28, 0x01	; 1
     568:	e1 f7       	brne	.-8      	; 0x562 <Init_Display+0x28>
	PORTC &= ~(1 << CLK); // put LOW on CLK in order to enable data latch to LEDS.
     56a:	42 98       	cbi	0x08, 2	; 8
	PORTC |=  (1 << nCE); // End Of serial transmitting.
     56c:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	25 e3       	ldi	r18, 0x35	; 53
     570:	2a 95       	dec	r18
     572:	f1 f7       	brne	.-4      	; 0x570 <Init_Display+0x36>
     574:	00 00       	nop
	_delay_us(20);
	PORTC |= (1 << RS);
     576:	41 9a       	sbi	0x08, 1	; 8
	PORTC &= ~(1 << nCE); // Start transmitting.
     578:	43 98       	cbi	0x08, 3	; 8
     57a:	02 e0       	ldi	r16, 0x02	; 2
     57c:	10 e0       	ldi	r17, 0x00	; 0
	for (int x = 0; x < 2; x++)
	{
		PORTC &= ~(1 << DIN); // Write Zero values to the dot register.
     57e:	40 98       	cbi	0x08, 0	; 8
		clk_period();
     580:	0e 94 bc 00 	call	0x178	; 0x178 <clk_period>
		PORTC |= (1 << DIN);
     584:	40 9a       	sbi	0x08, 0	; 8
     586:	c7 e0       	ldi	r28, 0x07	; 7
		for (uint8_t i = 0; i < 7; i++) { clk_period(); }
     588:	0e 94 bc 00 	call	0x178	; 0x178 <clk_period>
     58c:	c1 50       	subi	r28, 0x01	; 1
     58e:	e1 f7       	brne	.-8      	; 0x588 <Init_Display+0x4e>
     590:	01 50       	subi	r16, 0x01	; 1
     592:	11 09       	sbc	r17, r1
	PORTC &= ~(1 << CLK); // put LOW on CLK in order to enable data latch to LEDS.
	PORTC |=  (1 << nCE); // End Of serial transmitting.
	_delay_us(20);
	PORTC |= (1 << RS);
	PORTC &= ~(1 << nCE); // Start transmitting.
	for (int x = 0; x < 2; x++)
     594:	a1 f7       	brne	.-24     	; 0x57e <Init_Display+0x44>
		PORTC &= ~(1 << DIN); // Write Zero values to the dot register.
		clk_period();
		PORTC |= (1 << DIN);
		for (uint8_t i = 0; i < 7; i++) { clk_period(); }
	}
	PORTC &= ~(1 << CLK); // put LOW on CLK in order to enable data latch to LEDS.
     596:	42 98       	cbi	0x08, 2	; 8
	PORTC |=  (1 << nCE); // End Of serial transmitting.
     598:	43 9a       	sbi	0x08, 3	; 8
     59a:	85 e3       	ldi	r24, 0x35	; 53
     59c:	8a 95       	dec	r24
     59e:	f1 f7       	brne	.-4      	; 0x59c <Init_Display+0x62>
     5a0:	00 00       	nop
	_delay_us(20);
	PORTC |= (1 << RS);
     5a2:	41 9a       	sbi	0x08, 1	; 8
	PORTC &= ~(1 << nCE); // Start transmitting.
     5a4:	43 98       	cbi	0x08, 3	; 8
     5a6:	02 e0       	ldi	r16, 0x02	; 2
     5a8:	10 e0       	ldi	r17, 0x00	; 0
	for (int x = 0; x < 2; x++)
	{
		PORTC |= (1 << DIN);
     5aa:	40 9a       	sbi	0x08, 0	; 8
		clk_period();
     5ac:	0e 94 bc 00 	call	0x178	; 0x178 <clk_period>
		PORTC &= ~(1 << DIN);
     5b0:	40 98       	cbi	0x08, 0	; 8
     5b2:	c7 e0       	ldi	r28, 0x07	; 7
		for (uint8_t i = 0; i < 7; i++) { clk_period(); }
     5b4:	0e 94 bc 00 	call	0x178	; 0x178 <clk_period>
     5b8:	c1 50       	subi	r28, 0x01	; 1
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <Init_Display+0x7a>
     5bc:	01 50       	subi	r16, 0x01	; 1
     5be:	11 09       	sbc	r17, r1
	PORTC &= ~(1 << CLK); // put LOW on CLK in order to enable data latch to LEDS.
	PORTC |=  (1 << nCE); // End Of serial transmitting.
	_delay_us(20);
	PORTC |= (1 << RS);
	PORTC &= ~(1 << nCE); // Start transmitting.
	for (int x = 0; x < 2; x++)
     5c0:	a1 f7       	brne	.-24     	; 0x5aa <Init_Display+0x70>
		PORTC |= (1 << DIN);
		clk_period();
		PORTC &= ~(1 << DIN);
		for (uint8_t i = 0; i < 7; i++) { clk_period(); }
	}
	PORTC &= ~(1 << CLK); // put LOW on CLK in order to enable data latch to LEDS.
     5c2:	42 98       	cbi	0x08, 2	; 8
	PORTC |=  (1 << nCE); // End Of serial transmitting.
     5c4:	43 9a       	sbi	0x08, 3	; 8
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <open_matrix_SPI>:

/* Display communication initialization */
void open_matrix_SPI(void)
{
	PORTC &= ~(1 << RS);
     5d0:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << nCE); // Start serial transmitting.
     5d2:	43 98       	cbi	0x08, 3	; 8
     5d4:	08 95       	ret

000005d6 <close_matrix_SPI>:
}

/* Display communication termination */
void close_matrix_SPI(void)
{
	PORTC &= ~(1 << CLK); // Bring clk to LOW, so the data can be latched into the LEDS.
     5d6:	42 98       	cbi	0x08, 2	; 8
	PORTC |=  (1 << nCE); // Bring nCE to HIGH means - stop serial communication (End of package).
     5d8:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= ~(1 << DIN);
     5da:	40 98       	cbi	0x08, 0	; 8
     5dc:	08 95       	ret

000005de <Init_LED_MATRIX>:
}

/* LED matrices display initialization */
void Init_LED_MATRIX(void)
{
	DDRC |= (1 << CLK) | (1 << nCE) | (1 << RS) | (1 << DIN);
     5de:	87 b1       	in	r24, 0x07	; 7
     5e0:	8f 60       	ori	r24, 0x0F	; 15
     5e2:	87 b9       	out	0x07, r24	; 7
     5e4:	08 95       	ret

000005e6 <ds1302_init>:
	ds1302_update_time(time, YEAR);
}

void ds1302_init(void) // sets all pins as output and low
{
	ds1302_DDR |= (1<<rst) | (1<<clk) | (1<<io);
     5e6:	84 b1       	in	r24, 0x04	; 4
     5e8:	81 6c       	ori	r24, 0xC1	; 193
     5ea:	84 b9       	out	0x04, r24	; 4
//	ds1302_PORT |= (1<<rst) | (1<<clk) | (1<<io);
	clk_0(); // sclk -> 0
     5ec:	2e 98       	cbi	0x05, 6	; 5
     5ee:	85 e3       	ldi	r24, 0x35	; 53
     5f0:	8a 95       	dec	r24
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <ds1302_init+0xa>
     5f4:	00 00       	nop
	_delay_us(20);
	rst_0(); // rst -> 0
     5f6:	2f 98       	cbi	0x05, 7	; 5
     5f8:	85 e3       	ldi	r24, 0x35	; 53
     5fa:	8a 95       	dec	r24
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <ds1302_init+0x14>
     5fe:	00 00       	nop
	_delay_us(20);
	io_0(); // io -> 0
     600:	28 98       	cbi	0x05, 0	; 5
     602:	08 95       	ret

00000604 <ds1302_reset>:
}

void ds1302_reset(void)	 //sets the pins to begin the ds1302 communication
{
	clk_0(); // sclk -> 0
     604:	2e 98       	cbi	0x05, 6	; 5
     606:	85 e3       	ldi	r24, 0x35	; 53
     608:	8a 95       	dec	r24
     60a:	f1 f7       	brne	.-4      	; 0x608 <ds1302_reset+0x4>
     60c:	00 00       	nop
	_delay_us(20);
	rst_0(); // rst -> 0
     60e:	2f 98       	cbi	0x05, 7	; 5
     610:	85 e3       	ldi	r24, 0x35	; 53
     612:	8a 95       	dec	r24
     614:	f1 f7       	brne	.-4      	; 0x612 <ds1302_reset+0xe>
     616:	00 00       	nop
	_delay_us(20);
	rst_1(); // rst -> 1
     618:	2f 9a       	sbi	0x05, 7	; 5
     61a:	8a e0       	ldi	r24, 0x0A	; 10
     61c:	8a 95       	dec	r24
     61e:	f1 f7       	brne	.-4      	; 0x61c <ds1302_reset+0x18>
     620:	00 c0       	rjmp	.+0      	; 0x622 <ds1302_reset+0x1e>
     622:	08 95       	ret

00000624 <write>:

void write(unsigned char W_Byte)	//writes the W_Byte to the DS1302
{
	unsigned char i;

	ds1302_DDR |= (1<<io); // io as output -> 1
     624:	20 9a       	sbi	0x04, 0	; 4
     626:	98 e0       	ldi	r25, 0x08	; 8

	for(i = 0; i < 8; ++i)
	{
		io_0();
     628:	28 98       	cbi	0x05, 0	; 5

		if(W_Byte & 0x01)
     62a:	80 fd       	sbrc	r24, 0
		{
			io_1();
     62c:	28 9a       	sbi	0x05, 0	; 5
		}
		clk_0();
     62e:	2e 98       	cbi	0x05, 6	; 5
     630:	25 e3       	ldi	r18, 0x35	; 53
     632:	2a 95       	dec	r18
     634:	f1 f7       	brne	.-4      	; 0x632 <write+0xe>
     636:	00 00       	nop
		_delay_us(20);
		clk_1();
     638:	2e 9a       	sbi	0x05, 6	; 5
     63a:	25 e3       	ldi	r18, 0x35	; 53
     63c:	2a 95       	dec	r18
     63e:	f1 f7       	brne	.-4      	; 0x63c <write+0x18>
     640:	00 00       	nop
		_delay_us(20);
		W_Byte >>=1;
     642:	86 95       	lsr	r24
     644:	91 50       	subi	r25, 0x01	; 1
{
	unsigned char i;

	ds1302_DDR |= (1<<io); // io as output -> 1

	for(i = 0; i < 8; ++i)
     646:	81 f7       	brne	.-32     	; 0x628 <write+0x4>
		_delay_us(20);
		clk_1();
		_delay_us(20);
		W_Byte >>=1;
	}
}
     648:	08 95       	ret

0000064a <ds1302_write_byte>:
	clk_0();
	return temp;
}

void ds1302_write_byte(unsigned char w_byte, unsigned char w_2_byte)	//write the byte with register w_byte
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	d8 2f       	mov	r29, r24
     650:	c6 2f       	mov	r28, r22
	ds1302_reset();
     652:	0e 94 02 03 	call	0x604	; 0x604 <ds1302_reset>
	write(w_byte);
     656:	8d 2f       	mov	r24, r29
     658:	0e 94 12 03 	call	0x624	; 0x624 <write>
	write(w_2_byte);
     65c:	8c 2f       	mov	r24, r28
     65e:	0e 94 12 03 	call	0x624	; 0x624 <write>
     662:	85 e3       	ldi	r24, 0x35	; 53
     664:	8a 95       	dec	r24
     666:	f1 f7       	brne	.-4      	; 0x664 <ds1302_write_byte+0x1a>
     668:	00 00       	nop
	_delay_us(20);
	rst_0(); // rst -> 0
     66a:	2f 98       	cbi	0x05, 7	; 5
     66c:	85 e3       	ldi	r24, 0x35	; 53
     66e:	8a 95       	dec	r24
     670:	f1 f7       	brne	.-4      	; 0x66e <ds1302_write_byte+0x24>
     672:	00 00       	nop
	_delay_us(20);
	clk_0();
     674:	2e 98       	cbi	0x05, 6	; 5
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <read>:
{
	unsigned char i, R_Byte, TmpByte;

	R_Byte = 0x00;

	ds1302_DDR &= ~(1<<io); // io as input -> 0
     67c:	20 98       	cbi	0x04, 0	; 4
     67e:	85 e3       	ldi	r24, 0x35	; 53
     680:	8a 95       	dec	r24
     682:	f1 f7       	brne	.-4      	; 0x680 <read+0x4>
     684:	00 00       	nop
     686:	28 e0       	ldi	r18, 0x08	; 8

unsigned char read()	 //reads the ds1302 reply
{
	unsigned char i, R_Byte, TmpByte;

	R_Byte = 0x00;
     688:	80 e0       	ldi	r24, 0x00	; 0

	ds1302_DDR &= ~(1<<io); // io as input -> 0
	_delay_us(20);
	for(i = 0; i < 8; ++i) //get byte
	{
		clk_1();
     68a:	2e 9a       	sbi	0x05, 6	; 5
     68c:	95 e3       	ldi	r25, 0x35	; 53
     68e:	9a 95       	dec	r25
     690:	f1 f7       	brne	.-4      	; 0x68e <read+0x12>
     692:	00 00       	nop
		_delay_us(20);
		clk_0();
     694:	2e 98       	cbi	0x05, 6	; 5
     696:	95 e3       	ldi	r25, 0x35	; 53
     698:	9a 95       	dec	r25
     69a:	f1 f7       	brne	.-4      	; 0x698 <read+0x1c>
     69c:	00 00       	nop
		_delay_us(20);
		TmpByte = 0;
		if(bit_is_set(ds1302_PIN,io))
     69e:	93 b1       	in	r25, 0x03	; 3
		TmpByte = 1;
		TmpByte <<= 7;
		R_Byte >>= 1;
     6a0:	86 95       	lsr	r24
		R_Byte |= TmpByte;
     6a2:	97 95       	ror	r25
     6a4:	99 27       	eor	r25, r25
     6a6:	97 95       	ror	r25
     6a8:	89 2b       	or	r24, r25
     6aa:	21 50       	subi	r18, 0x01	; 1

	R_Byte = 0x00;

	ds1302_DDR &= ~(1<<io); // io as input -> 0
	_delay_us(20);
	for(i = 0; i < 8; ++i) //get byte
     6ac:	71 f7       	brne	.-36     	; 0x68a <read+0xe>
		TmpByte <<= 7;
		R_Byte >>= 1;
		R_Byte |= TmpByte;
	}
	return R_Byte;
     6ae:	08 95       	ret

000006b0 <ds1302_read_byte>:
	rst_1(); // rst -> 1
	_delay_us(4);
}

unsigned char ds1302_read_byte(unsigned char w_byte)	//read the byte with register w_byte
{
     6b0:	cf 93       	push	r28
     6b2:	c8 2f       	mov	r28, r24
	unsigned char temp;
	ds1302_reset();
     6b4:	0e 94 02 03 	call	0x604	; 0x604 <ds1302_reset>
	write(w_byte);
     6b8:	8c 2f       	mov	r24, r28
     6ba:	0e 94 12 03 	call	0x624	; 0x624 <write>
	temp = read();
     6be:	0e 94 3e 03 	call	0x67c	; 0x67c <read>
     6c2:	95 e3       	ldi	r25, 0x35	; 53
     6c4:	9a 95       	dec	r25
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <ds1302_read_byte+0x14>
     6c8:	00 00       	nop
	_delay_us(20);
	rst_0(); // rst -> 0
     6ca:	2f 98       	cbi	0x05, 7	; 5
     6cc:	95 e3       	ldi	r25, 0x35	; 53
     6ce:	9a 95       	dec	r25
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <ds1302_read_byte+0x1e>
     6d2:	00 00       	nop
	_delay_us(20);
	clk_0();
     6d4:	2e 98       	cbi	0x05, 6	; 5
	return temp;
}
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <ds1302_comms>:
	unsigned char temp;
	ds1302_comms(time, field, w_byte, WRITE);
}

void ds1302_comms(struct rtc_time * time, unsigned char field, unsigned char write_byte, unsigned char rw)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
	unsigned char temp;

	if(rw == READ)
     6e0:	2f 30       	cpi	r18, 0x0F	; 15
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <ds1302_comms+0xc>
     6e4:	6d c0       	rjmp	.+218    	; 0x7c0 <ds1302_comms+0xe6>
	{
		if(field == SEC)
     6e6:	64 31       	cpi	r22, 0x14	; 20
     6e8:	81 f4       	brne	.+32     	; 0x70a <ds1302_comms+0x30>
		{
			temp = ds1302_read_byte(sec_r);
     6ea:	81 e8       	ldi	r24, 0x81	; 129
     6ec:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ds1302_read_byte>
			time->second = ((temp & 0x0F) + ((temp & 0x70)>>4)*10);
     6f0:	98 2f       	mov	r25, r24
     6f2:	90 77       	andi	r25, 0x70	; 112
     6f4:	96 95       	lsr	r25
     6f6:	96 95       	lsr	r25
     6f8:	96 95       	lsr	r25
     6fa:	29 2f       	mov	r18, r25
     6fc:	22 0f       	add	r18, r18
     6fe:	22 0f       	add	r18, r18
     700:	92 0f       	add	r25, r18
     702:	8f 70       	andi	r24, 0x0F	; 15
     704:	89 0f       	add	r24, r25
     706:	88 83       	st	Y, r24
     708:	2b c1       	rjmp	.+598    	; 0x960 <__stack+0x61>
		}
		else if(field == MIN)
     70a:	65 31       	cpi	r22, 0x15	; 21
     70c:	81 f4       	brne	.+32     	; 0x72e <ds1302_comms+0x54>
		{
			temp = ds1302_read_byte(min_r);
     70e:	83 e8       	ldi	r24, 0x83	; 131
     710:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ds1302_read_byte>
			time->minute = ((temp & 0x0F) + ((temp & 0x70)>>4)*10);
     714:	98 2f       	mov	r25, r24
     716:	90 77       	andi	r25, 0x70	; 112
     718:	96 95       	lsr	r25
     71a:	96 95       	lsr	r25
     71c:	96 95       	lsr	r25
     71e:	29 2f       	mov	r18, r25
     720:	22 0f       	add	r18, r18
     722:	22 0f       	add	r18, r18
     724:	92 0f       	add	r25, r18
     726:	8f 70       	andi	r24, 0x0F	; 15
     728:	89 0f       	add	r24, r25
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	19 c1       	rjmp	.+562    	; 0x960 <__stack+0x61>
		}
		else if(field == HOUR)
     72e:	66 31       	cpi	r22, 0x16	; 22
     730:	91 f4       	brne	.+36     	; 0x756 <ds1302_comms+0x7c>
		{
			temp = ds1302_read_byte(hour_r);
     732:	85 e8       	ldi	r24, 0x85	; 133
     734:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ds1302_read_byte>
				
				time->hour = ((temp & 0x0F) + ((temp & 0x10)>>4)*10);
			}
			else						// 24 format
			{
				time->hour_format = H24;
     738:	9c e0       	ldi	r25, 0x0C	; 12
     73a:	9f 83       	std	Y+7, r25	; 0x07
				time->hour = ((temp & 0x0F) + ((temp & 0x30)>>4)*10);
     73c:	98 2f       	mov	r25, r24
     73e:	90 73       	andi	r25, 0x30	; 48
     740:	96 95       	lsr	r25
     742:	96 95       	lsr	r25
     744:	96 95       	lsr	r25
     746:	29 2f       	mov	r18, r25
     748:	22 0f       	add	r18, r18
     74a:	22 0f       	add	r18, r18
     74c:	92 0f       	add	r25, r18
     74e:	8f 70       	andi	r24, 0x0F	; 15
     750:	89 0f       	add	r24, r25
     752:	8a 83       	std	Y+2, r24	; 0x02
     754:	05 c1       	rjmp	.+522    	; 0x960 <__stack+0x61>
		else if(field == DAY)
		{
			temp = ds1302_read_byte(day_r);
			time->day = (temp & 0x07);
		}
		else if(field == DATE)
     756:	67 31       	cpi	r22, 0x17	; 23
     758:	81 f4       	brne	.+32     	; 0x77a <ds1302_comms+0xa0>
		{
			temp = ds1302_read_byte(date_r);
     75a:	87 e8       	ldi	r24, 0x87	; 135
     75c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ds1302_read_byte>
			time->date = ((temp & 0x0F) + ((temp & 0x30)>>4)*10);
     760:	98 2f       	mov	r25, r24
     762:	90 73       	andi	r25, 0x30	; 48
     764:	96 95       	lsr	r25
     766:	96 95       	lsr	r25
     768:	96 95       	lsr	r25
     76a:	29 2f       	mov	r18, r25
     76c:	22 0f       	add	r18, r18
     76e:	22 0f       	add	r18, r18
     770:	92 0f       	add	r25, r18
     772:	8f 70       	andi	r24, 0x0F	; 15
     774:	89 0f       	add	r24, r25
     776:	8c 83       	std	Y+4, r24	; 0x04
     778:	f3 c0       	rjmp	.+486    	; 0x960 <__stack+0x61>
		}
		else if(field == MONTH)
     77a:	68 31       	cpi	r22, 0x18	; 24
     77c:	79 f4       	brne	.+30     	; 0x79c <ds1302_comms+0xc2>
		{
			temp = ds1302_read_byte(month_r);
     77e:	89 e8       	ldi	r24, 0x89	; 137
     780:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ds1302_read_byte>
			time->month = ((temp & 0x0F) + ((temp & 0x10)>>4)*10);
     784:	84 fb       	bst	r24, 4
     786:	99 27       	eor	r25, r25
     788:	90 f9       	bld	r25, 0
     78a:	99 0f       	add	r25, r25
     78c:	29 2f       	mov	r18, r25
     78e:	22 0f       	add	r18, r18
     790:	22 0f       	add	r18, r18
     792:	92 0f       	add	r25, r18
     794:	8f 70       	andi	r24, 0x0F	; 15
     796:	89 0f       	add	r24, r25
     798:	8d 83       	std	Y+5, r24	; 0x05
     79a:	e2 c0       	rjmp	.+452    	; 0x960 <__stack+0x61>
		}
		else if(field == YEAR)
     79c:	69 31       	cpi	r22, 0x19	; 25
     79e:	09 f0       	breq	.+2      	; 0x7a2 <ds1302_comms+0xc8>
     7a0:	df c0       	rjmp	.+446    	; 0x960 <__stack+0x61>
		{
			temp = ds1302_read_byte(year_r);
     7a2:	8d e8       	ldi	r24, 0x8D	; 141
     7a4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ds1302_read_byte>
			time->minute = ((temp & 0x0F) + ((temp & 0xF0)>>4)*10);
     7a8:	98 2f       	mov	r25, r24
     7aa:	92 95       	swap	r25
     7ac:	9f 70       	andi	r25, 0x0F	; 15
     7ae:	99 0f       	add	r25, r25
     7b0:	29 2f       	mov	r18, r25
     7b2:	22 0f       	add	r18, r18
     7b4:	22 0f       	add	r18, r18
     7b6:	92 0f       	add	r25, r18
     7b8:	8f 70       	andi	r24, 0x0F	; 15
     7ba:	89 0f       	add	r24, r25
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	d0 c0       	rjmp	.+416    	; 0x960 <__stack+0x61>
		}
	}
	else if(rw == WRITE)
     7c0:	20 31       	cpi	r18, 0x10	; 16
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <ds1302_comms+0xec>
     7c4:	cd c0       	rjmp	.+410    	; 0x960 <__stack+0x61>
	{
		if(field == SEC)
     7c6:	64 31       	cpi	r22, 0x14	; 20
     7c8:	b9 f4       	brne	.+46     	; 0x7f8 <ds1302_comms+0x11e>
		{
			ds1302_write_byte(sec_w, (((write_byte/10)<<4) & 0x70 | (write_byte%10)));
     7ca:	8d ec       	ldi	r24, 0xCD	; 205
     7cc:	48 9f       	mul	r20, r24
     7ce:	81 2d       	mov	r24, r1
     7d0:	11 24       	eor	r1, r1
     7d2:	86 95       	lsr	r24
     7d4:	86 95       	lsr	r24
     7d6:	86 95       	lsr	r24
     7d8:	90 e1       	ldi	r25, 0x10	; 16
     7da:	89 9f       	mul	r24, r25
     7dc:	b0 01       	movw	r22, r0
     7de:	11 24       	eor	r1, r1
     7e0:	60 77       	andi	r22, 0x70	; 112
     7e2:	88 0f       	add	r24, r24
     7e4:	98 2f       	mov	r25, r24
     7e6:	99 0f       	add	r25, r25
     7e8:	99 0f       	add	r25, r25
     7ea:	89 0f       	add	r24, r25
     7ec:	48 1b       	sub	r20, r24
     7ee:	64 2b       	or	r22, r20
     7f0:	80 e8       	ldi	r24, 0x80	; 128
     7f2:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     7f6:	b4 c0       	rjmp	.+360    	; 0x960 <__stack+0x61>
		}
		else if(field == MIN)
     7f8:	65 31       	cpi	r22, 0x15	; 21
     7fa:	b9 f4       	brne	.+46     	; 0x82a <ds1302_comms+0x150>
		{
			ds1302_write_byte(min_w, (((write_byte/10)<<4) & 0x70  | (write_byte%10)));
     7fc:	8d ec       	ldi	r24, 0xCD	; 205
     7fe:	48 9f       	mul	r20, r24
     800:	81 2d       	mov	r24, r1
     802:	11 24       	eor	r1, r1
     804:	86 95       	lsr	r24
     806:	86 95       	lsr	r24
     808:	86 95       	lsr	r24
     80a:	90 e1       	ldi	r25, 0x10	; 16
     80c:	89 9f       	mul	r24, r25
     80e:	b0 01       	movw	r22, r0
     810:	11 24       	eor	r1, r1
     812:	60 77       	andi	r22, 0x70	; 112
     814:	88 0f       	add	r24, r24
     816:	98 2f       	mov	r25, r24
     818:	99 0f       	add	r25, r25
     81a:	99 0f       	add	r25, r25
     81c:	89 0f       	add	r24, r25
     81e:	48 1b       	sub	r20, r24
     820:	64 2b       	or	r22, r20
     822:	82 e8       	ldi	r24, 0x82	; 130
     824:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     828:	9b c0       	rjmp	.+310    	; 0x960 <__stack+0x61>
		}
		else if(field == HOUR)
     82a:	66 31       	cpi	r22, 0x16	; 22
     82c:	09 f0       	breq	.+2      	; 0x830 <ds1302_comms+0x156>
     82e:	4f c0       	rjmp	.+158    	; 0x8ce <ds1302_comms+0x1f4>
		{
			if(time->hour_format == AM)
     830:	8f 81       	ldd	r24, Y+7	; 0x07
     832:	8a 30       	cpi	r24, 0x0A	; 10
     834:	c1 f4       	brne	.+48     	; 0x866 <ds1302_comms+0x18c>
			ds1302_write_byte(hour_w, (((write_byte/10)<<4) & 0x10  | (write_byte%10)) | 0x80);
     836:	8d ec       	ldi	r24, 0xCD	; 205
     838:	48 9f       	mul	r20, r24
     83a:	81 2d       	mov	r24, r1
     83c:	11 24       	eor	r1, r1
     83e:	86 95       	lsr	r24
     840:	86 95       	lsr	r24
     842:	86 95       	lsr	r24
     844:	90 e1       	ldi	r25, 0x10	; 16
     846:	89 9f       	mul	r24, r25
     848:	b0 01       	movw	r22, r0
     84a:	11 24       	eor	r1, r1
     84c:	60 71       	andi	r22, 0x10	; 16
     84e:	88 0f       	add	r24, r24
     850:	98 2f       	mov	r25, r24
     852:	99 0f       	add	r25, r25
     854:	99 0f       	add	r25, r25
     856:	89 0f       	add	r24, r25
     858:	48 1b       	sub	r20, r24
     85a:	40 68       	ori	r20, 0x80	; 128
     85c:	64 2b       	or	r22, r20
     85e:	84 e8       	ldi	r24, 0x84	; 132
     860:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     864:	7d c0       	rjmp	.+250    	; 0x960 <__stack+0x61>
			else if(time->hour_format == PM)
     866:	8b 30       	cpi	r24, 0x0B	; 11
     868:	c1 f4       	brne	.+48     	; 0x89a <ds1302_comms+0x1c0>
			ds1302_write_byte(hour_w, (((write_byte/10)<<4) & 0x10  | (write_byte%10)) | 0xA0);
     86a:	8d ec       	ldi	r24, 0xCD	; 205
     86c:	48 9f       	mul	r20, r24
     86e:	81 2d       	mov	r24, r1
     870:	11 24       	eor	r1, r1
     872:	86 95       	lsr	r24
     874:	86 95       	lsr	r24
     876:	86 95       	lsr	r24
     878:	90 e1       	ldi	r25, 0x10	; 16
     87a:	89 9f       	mul	r24, r25
     87c:	b0 01       	movw	r22, r0
     87e:	11 24       	eor	r1, r1
     880:	60 71       	andi	r22, 0x10	; 16
     882:	88 0f       	add	r24, r24
     884:	98 2f       	mov	r25, r24
     886:	99 0f       	add	r25, r25
     888:	99 0f       	add	r25, r25
     88a:	89 0f       	add	r24, r25
     88c:	48 1b       	sub	r20, r24
     88e:	40 6a       	ori	r20, 0xA0	; 160
     890:	64 2b       	or	r22, r20
     892:	84 e8       	ldi	r24, 0x84	; 132
     894:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     898:	63 c0       	rjmp	.+198    	; 0x960 <__stack+0x61>
			else if(time->hour_format == H24)
     89a:	8c 30       	cpi	r24, 0x0C	; 12
     89c:	09 f0       	breq	.+2      	; 0x8a0 <ds1302_comms+0x1c6>
     89e:	60 c0       	rjmp	.+192    	; 0x960 <__stack+0x61>
			ds1302_write_byte(hour_w, ((((write_byte/10)<<4) & 0x30) | (write_byte % 10)));
     8a0:	8d ec       	ldi	r24, 0xCD	; 205
     8a2:	48 9f       	mul	r20, r24
     8a4:	81 2d       	mov	r24, r1
     8a6:	11 24       	eor	r1, r1
     8a8:	86 95       	lsr	r24
     8aa:	86 95       	lsr	r24
     8ac:	86 95       	lsr	r24
     8ae:	90 e1       	ldi	r25, 0x10	; 16
     8b0:	89 9f       	mul	r24, r25
     8b2:	b0 01       	movw	r22, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	60 73       	andi	r22, 0x30	; 48
     8b8:	88 0f       	add	r24, r24
     8ba:	98 2f       	mov	r25, r24
     8bc:	99 0f       	add	r25, r25
     8be:	99 0f       	add	r25, r25
     8c0:	89 0f       	add	r24, r25
     8c2:	48 1b       	sub	r20, r24
     8c4:	64 2b       	or	r22, r20
     8c6:	84 e8       	ldi	r24, 0x84	; 132
     8c8:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     8cc:	49 c0       	rjmp	.+146    	; 0x960 <__stack+0x61>
		}
		else if(field == DAY)
		{
			ds1302_write_byte(day_w, write_byte & 0x03);
		}
		else if(field == DATE)
     8ce:	67 31       	cpi	r22, 0x17	; 23
     8d0:	b9 f4       	brne	.+46     	; 0x900 <__stack+0x1>
		{
			ds1302_write_byte(date_w, (((write_byte/10)<<4) & 0x30  | (write_byte%10)));
     8d2:	8d ec       	ldi	r24, 0xCD	; 205
     8d4:	48 9f       	mul	r20, r24
     8d6:	81 2d       	mov	r24, r1
     8d8:	11 24       	eor	r1, r1
     8da:	86 95       	lsr	r24
     8dc:	86 95       	lsr	r24
     8de:	86 95       	lsr	r24
     8e0:	90 e1       	ldi	r25, 0x10	; 16
     8e2:	89 9f       	mul	r24, r25
     8e4:	b0 01       	movw	r22, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	60 73       	andi	r22, 0x30	; 48
     8ea:	88 0f       	add	r24, r24
     8ec:	98 2f       	mov	r25, r24
     8ee:	99 0f       	add	r25, r25
     8f0:	99 0f       	add	r25, r25
     8f2:	89 0f       	add	r24, r25
     8f4:	48 1b       	sub	r20, r24
     8f6:	64 2b       	or	r22, r20
     8f8:	86 e8       	ldi	r24, 0x86	; 134
     8fa:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     8fe:	30 c0       	rjmp	.+96     	; 0x960 <__stack+0x61>
		}
		else if(field == MONTH)
     900:	68 31       	cpi	r22, 0x18	; 24
     902:	b9 f4       	brne	.+46     	; 0x932 <__stack+0x33>
		{
			ds1302_write_byte(month_w, (((write_byte/10)<<4) & 0x10 | (write_byte%10)));
     904:	8d ec       	ldi	r24, 0xCD	; 205
     906:	48 9f       	mul	r20, r24
     908:	81 2d       	mov	r24, r1
     90a:	11 24       	eor	r1, r1
     90c:	86 95       	lsr	r24
     90e:	86 95       	lsr	r24
     910:	86 95       	lsr	r24
     912:	90 e1       	ldi	r25, 0x10	; 16
     914:	89 9f       	mul	r24, r25
     916:	b0 01       	movw	r22, r0
     918:	11 24       	eor	r1, r1
     91a:	60 71       	andi	r22, 0x10	; 16
     91c:	88 0f       	add	r24, r24
     91e:	98 2f       	mov	r25, r24
     920:	99 0f       	add	r25, r25
     922:	99 0f       	add	r25, r25
     924:	89 0f       	add	r24, r25
     926:	48 1b       	sub	r20, r24
     928:	64 2b       	or	r22, r20
     92a:	88 e8       	ldi	r24, 0x88	; 136
     92c:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
     930:	17 c0       	rjmp	.+46     	; 0x960 <__stack+0x61>
		}
		else if(field == YEAR)
     932:	69 31       	cpi	r22, 0x19	; 25
     934:	a9 f4       	brne	.+42     	; 0x960 <__stack+0x61>
		{
			ds1302_write_byte(year_w, (((write_byte/10)<<4) & 0xF0 | (write_byte%10)));
     936:	8d ec       	ldi	r24, 0xCD	; 205
     938:	48 9f       	mul	r20, r24
     93a:	81 2d       	mov	r24, r1
     93c:	11 24       	eor	r1, r1
     93e:	86 95       	lsr	r24
     940:	86 95       	lsr	r24
     942:	86 95       	lsr	r24
     944:	90 e1       	ldi	r25, 0x10	; 16
     946:	89 9f       	mul	r24, r25
     948:	b0 01       	movw	r22, r0
     94a:	11 24       	eor	r1, r1
     94c:	88 0f       	add	r24, r24
     94e:	98 2f       	mov	r25, r24
     950:	99 0f       	add	r25, r25
     952:	99 0f       	add	r25, r25
     954:	89 0f       	add	r24, r25
     956:	48 1b       	sub	r20, r24
     958:	64 2b       	or	r22, r20
     95a:	8c e8       	ldi	r24, 0x8C	; 140
     95c:	0e 94 25 03 	call	0x64a	; 0x64a <ds1302_write_byte>
		}
	}
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <ds1302_update_time>:
#include "rtc.h"

void ds1302_update_time(struct rtc_time * time, unsigned char field)	// read time, field can be SEC, MIN, HOUR...
{
	unsigned char temp;
	ds1302_comms(time, field, 0, READ);
     966:	2f e0       	ldi	r18, 0x0F	; 15
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	0e 94 6d 03 	call	0x6da	; 0x6da <ds1302_comms>
     96e:	08 95       	ret

00000970 <ds1302_update>:
		}
	}
}

void ds1302_update(struct rtc_time * time)
{
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
	ds1302_update_time(time, SEC);
     976:	64 e1       	ldi	r22, 0x14	; 20
     978:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	ds1302_update_time(time, MIN);
     97c:	65 e1       	ldi	r22, 0x15	; 21
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	ds1302_update_time(time, HOUR);
     984:	66 e1       	ldi	r22, 0x16	; 22
     986:	ce 01       	movw	r24, r28
     988:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	ds1302_update_time(time, DAY);
     98c:	66 e1       	ldi	r22, 0x16	; 22
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	ds1302_update_time(time, DATE);
     994:	67 e1       	ldi	r22, 0x17	; 23
     996:	ce 01       	movw	r24, r28
     998:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	ds1302_update_time(time, MONTH);
     99c:	68 e1       	ldi	r22, 0x18	; 24
     99e:	ce 01       	movw	r24, r28
     9a0:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	ds1302_update_time(time, YEAR);
     9a4:	69 e1       	ldi	r22, 0x19	; 25
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <ds1302_set_time>:
}

void ds1302_set_time(struct rtc_time * time, unsigned char field, unsigned char w_byte)	// set time, field can be SEC, MIN, HOUR...
{																						// w_byte can be the value you want to set
	unsigned char temp;
	ds1302_comms(time, field, w_byte, WRITE);
     9b2:	20 e1       	ldi	r18, 0x10	; 16
     9b4:	0e 94 6d 03 	call	0x6da	; 0x6da <ds1302_comms>
     9b8:	08 95       	ret

000009ba <greetings>:
/* PWM output on the RGB LED enable */
void PWM_OUT(int color_type, int duty_cycle)
{
	if (color_type == GREEN)	OCR0A = duty_cycle;
	if (color_type == BLUE)		OCR1A = duty_cycle;
	if (color_type == RED)		OCR0B = duty_cycle;
     9ba:	cf 93       	push	r28
     9bc:	c8 2f       	mov	r28, r24
     9be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
     9c2:	84 e9       	ldi	r24, 0x94	; 148
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     9ca:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
     9ce:	2f ef       	ldi	r18, 0xFF	; 255
     9d0:	89 e6       	ldi	r24, 0x69	; 105
     9d2:	98 e1       	ldi	r25, 0x18	; 24
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	80 40       	sbci	r24, 0x00	; 0
     9d8:	90 40       	sbci	r25, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <greetings+0x1a>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <greetings+0x24>
     9de:	00 00       	nop
     9e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
     9e4:	c4 30       	cpi	r28, 0x04	; 4
     9e6:	20 f4       	brcc	.+8      	; 0x9f0 <greetings+0x36>
     9e8:	8d e9       	ldi	r24, 0x9D	; 157
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     9f0:	8c ef       	ldi	r24, 0xFC	; 252
     9f2:	8c 0f       	add	r24, r28
     9f4:	88 30       	cpi	r24, 0x08	; 8
     9f6:	20 f4       	brcc	.+8      	; 0xa00 <greetings+0x46>
     9f8:	86 ea       	ldi	r24, 0xA6	; 166
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     a00:	84 ef       	ldi	r24, 0xF4	; 244
     a02:	8c 0f       	add	r24, r28
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	20 f4       	brcc	.+8      	; 0xa10 <greetings+0x56>
     a08:	8f ea       	ldi	r24, 0xAF	; 175
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     a10:	c1 51       	subi	r28, 0x11	; 17
     a12:	c7 30       	cpi	r28, 0x07	; 7
     a14:	20 f4       	brcc	.+8      	; 0xa1e <greetings+0x64>
     a16:	88 eb       	ldi	r24, 0xB8	; 184
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     a1e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
     a22:	2f ef       	ldi	r18, 0xFF	; 255
     a24:	89 e6       	ldi	r24, 0x69	; 105
     a26:	98 e1       	ldi	r25, 0x18	; 24
     a28:	21 50       	subi	r18, 0x01	; 1
     a2a:	80 40       	sbci	r24, 0x00	; 0
     a2c:	90 40       	sbci	r25, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <greetings+0x6e>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <greetings+0x78>
     a32:	00 00       	nop
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <int_to_ascii>:
     a38:	8a 30       	cpi	r24, 0x0A	; 10
     a3a:	91 05       	cpc	r25, r1
     a3c:	3c f4       	brge	.+14     	; 0xa4c <int_to_ascii+0x14>
     a3e:	eb e2       	ldi	r30, 0x2B	; 43
     a40:	f2 e0       	ldi	r31, 0x02	; 2
     a42:	90 e3       	ldi	r25, 0x30	; 48
     a44:	90 83       	st	Z, r25
     a46:	80 5d       	subi	r24, 0xD0	; 208
     a48:	81 83       	std	Z+1, r24	; 0x01
     a4a:	08 95       	ret
     a4c:	eb e2       	ldi	r30, 0x2B	; 43
     a4e:	f2 e0       	ldi	r31, 0x02	; 2
     a50:	2a e0       	ldi	r18, 0x0A	; 10
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	b9 01       	movw	r22, r18
     a56:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divmodhi4>
     a5a:	80 5d       	subi	r24, 0xD0	; 208
     a5c:	81 83       	std	Z+1, r24	; 0x01
     a5e:	cb 01       	movw	r24, r22
     a60:	b9 01       	movw	r22, r18
     a62:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divmodhi4>
     a66:	80 5d       	subi	r24, 0xD0	; 208
     a68:	80 83       	st	Z, r24
     a6a:	08 95       	ret

00000a6c <print_time_string>:
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	8c 01       	movw	r16, r24
     a7a:	7b 01       	movw	r14, r22
     a7c:	ca 01       	movw	r24, r20
     a7e:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
     a82:	cb e2       	ldi	r28, 0x2B	; 43
     a84:	d2 e0       	ldi	r29, 0x02	; 2
     a86:	88 81       	ld	r24, Y
     a88:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     a92:	8a e3       	ldi	r24, 0x3A	; 58
     a94:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     a98:	c7 01       	movw	r24, r14
     a9a:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
     a9e:	88 81       	ld	r24, Y
     aa0:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     aaa:	8a e3       	ldi	r24, 0x3A	; 58
     aac:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
     ab6:	88 81       	ld	r24, Y
     ab8:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	08 95       	ret

00000ad0 <month_string_determine>:
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	fc 01       	movw	r30, r24
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	ec 30       	cpi	r30, 0x0C	; 12
     ad8:	f1 05       	cpc	r31, r1
     ada:	08 f0       	brcs	.+2      	; 0xade <month_string_determine+0xe>
     adc:	3f c0       	rjmp	.+126    	; 0xb5c <month_string_determine+0x8c>
     ade:	ef 56       	subi	r30, 0x6F	; 111
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__tablejump2__>
     ae6:	81 ec       	ldi	r24, 0xC1	; 193
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     aee:	08 95       	ret
     af0:	85 ec       	ldi	r24, 0xC5	; 197
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     af8:	08 95       	ret
     afa:	89 ec       	ldi	r24, 0xC9	; 201
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b02:	08 95       	ret
     b04:	8d ec       	ldi	r24, 0xCD	; 205
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b0c:	08 95       	ret
     b0e:	81 ed       	ldi	r24, 0xD1	; 209
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b16:	08 95       	ret
     b18:	85 ed       	ldi	r24, 0xD5	; 213
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b20:	08 95       	ret
     b22:	89 ed       	ldi	r24, 0xD9	; 217
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b2a:	08 95       	ret
     b2c:	8d ed       	ldi	r24, 0xDD	; 221
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b34:	08 95       	ret
     b36:	81 ee       	ldi	r24, 0xE1	; 225
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b3e:	08 95       	ret
     b40:	85 ee       	ldi	r24, 0xE5	; 229
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b48:	08 95       	ret
     b4a:	89 ee       	ldi	r24, 0xE9	; 233
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b52:	08 95       	ret
     b54:	8d ee       	ldi	r24, 0xED	; 237
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
     b5c:	08 95       	ret

00000b5e <print_date_string>:
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
     b66:	16 2f       	mov	r17, r22
     b68:	8c e7       	ldi	r24, 0x7C	; 124
     b6a:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     b6e:	ce 01       	movw	r24, r28
     b70:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
     b74:	cb e2       	ldi	r28, 0x2B	; 43
     b76:	d2 e0       	ldi	r29, 0x02	; 2
     b78:	88 81       	ld	r24, Y
     b7a:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     b84:	8f e2       	ldi	r24, 0x2F	; 47
     b86:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     b8a:	81 2f       	mov	r24, r17
     b8c:	0e 94 68 05 	call	0xad0	; 0xad0 <month_string_determine>
     b90:	8c e7       	ldi	r24, 0x7C	; 124
     b92:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	08 95       	ret

00000b9e <Init_switches>:
     b9e:	51 98       	cbi	0x0a, 1	; 10
     ba0:	52 98       	cbi	0x0a, 2	; 10
     ba2:	53 98       	cbi	0x0a, 3	; 10
     ba4:	08 95       	ret

00000ba6 <Init_RGB_LED>:
     ba6:	8a b1       	in	r24, 0x0a	; 10
     ba8:	80 66       	ori	r24, 0x60	; 96
     baa:	8a b9       	out	0x0a, r24	; 10
     bac:	21 9a       	sbi	0x04, 1	; 4
     bae:	e0 e8       	ldi	r30, 0x80	; 128
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	81 68       	ori	r24, 0x81	; 129
     bb6:	80 83       	st	Z, r24
     bb8:	e1 e8       	ldi	r30, 0x81	; 129
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	89 60       	ori	r24, 0x09	; 9
     bc0:	80 83       	st	Z, r24
     bc2:	84 b5       	in	r24, 0x24	; 36
     bc4:	83 6a       	ori	r24, 0xA3	; 163
     bc6:	84 bd       	out	0x24, r24	; 36
     bc8:	85 b5       	in	r24, 0x25	; 37
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	85 bd       	out	0x25, r24	; 37
     bce:	08 95       	ret

00000bd0 <Init_Device>:
     bd0:	50 9a       	sbi	0x0a, 0	; 10
     bd2:	0e 94 ef 02 	call	0x5de	; 0x5de <Init_LED_MATRIX>
     bd6:	0e 94 9d 02 	call	0x53a	; 0x53a <Init_Display>
     bda:	0e 94 d3 05 	call	0xba6	; 0xba6 <Init_RGB_LED>
     bde:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Init_switches>
     be2:	08 95       	ret

00000be4 <stop_timers>:
     be4:	e0 e8       	ldi	r30, 0x80	; 128
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8e 77       	andi	r24, 0x7E	; 126
     bec:	80 83       	st	Z, r24
     bee:	e1 e8       	ldi	r30, 0x81	; 129
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	86 7f       	andi	r24, 0xF6	; 246
     bf6:	80 83       	st	Z, r24
     bf8:	84 b5       	in	r24, 0x24	; 36
     bfa:	8c 75       	andi	r24, 0x5C	; 92
     bfc:	84 bd       	out	0x24, r24	; 36
     bfe:	85 b5       	in	r24, 0x25	; 37
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	85 bd       	out	0x25, r24	; 37
     c04:	08 95       	ret

00000c06 <showRGB>:
	// spans 255 because analogWrite() wants a number from 0 to 255.

	// In each of these zones, we'll calculate the brightness
	// for each of the red, green, and blue LEDs within the RGB LED.

	if (color <= 255)          // zone 1
     c06:	8f 3f       	cpi	r24, 0xFF	; 255
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <showRGB+0x8>
     c0c:	3c f4       	brge	.+14     	; 0xc1c <showRGB+0x16>
	{
		redIntensity = 255 - color;    // red goes from on to off
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	28 1b       	sub	r18, r24
     c14:	39 0b       	sbc	r19, r25
		greenIntensity = color;        // green goes from off to on
		blueIntensity = 0;             // blue is always off
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <showRGB+0x44>
	}
	else if (color <= 511)     // zone 2
     c1c:	81 15       	cp	r24, r1
     c1e:	22 e0       	ldi	r18, 0x02	; 2
     c20:	92 07       	cpc	r25, r18
     c22:	5c f4       	brge	.+22     	; 0xc3a <showRGB+0x34>
	{
		redIntensity = 0;                     // red is always off
		greenIntensity = 255 - (color - 256); // green on to off
		blueIntensity = (color - 256);        // blue off to on
     c24:	ac 01       	movw	r20, r24
     c26:	5a 95       	dec	r21
		blueIntensity = 0;             // blue is always off
	}
	else if (color <= 511)     // zone 2
	{
		redIntensity = 0;                     // red is always off
		greenIntensity = 255 - (color - 256); // green on to off
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	31 e0       	ldi	r19, 0x01	; 1
     c2c:	b9 01       	movw	r22, r18
     c2e:	68 1b       	sub	r22, r24
     c30:	79 0b       	sbc	r23, r25
     c32:	cb 01       	movw	r24, r22
		greenIntensity = color;        // green goes from off to on
		blueIntensity = 0;             // blue is always off
	}
	else if (color <= 511)     // zone 2
	{
		redIntensity = 0;                     // red is always off
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <showRGB+0x44>
		greenIntensity = 255 - (color - 256); // green on to off
		blueIntensity = (color - 256);        // blue off to on
	}
	else // color >= 512       // zone 3
	{
		redIntensity = (color - 512);         // red off to on
     c3a:	9c 01       	movw	r18, r24
     c3c:	32 50       	subi	r19, 0x02	; 2
		greenIntensity = 0;                   // green is always off
		blueIntensity = 255 - (color - 512);  // blue on to off
     c3e:	4f ef       	ldi	r20, 0xFF	; 255
     c40:	52 e0       	ldi	r21, 0x02	; 2
     c42:	48 1b       	sub	r20, r24
     c44:	59 0b       	sbc	r21, r25
		blueIntensity = (color - 256);        // blue off to on
	}
	else // color >= 512       // zone 3
	{
		redIntensity = (color - 512);         // red off to on
		greenIntensity = 0;                   // green is always off
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
/* PWM output on the RGB LED enable */
void PWM_OUT(int color_type, int duty_cycle)
{
	if (color_type == GREEN)	OCR0A = duty_cycle;
	if (color_type == BLUE)		OCR1A = duty_cycle;
	if (color_type == RED)		OCR0B = duty_cycle;
     c4a:	28 bd       	out	0x28, r18	; 40

/* PWM output on the RGB LED enable */
void PWM_OUT(int color_type, int duty_cycle)
{
	if (color_type == GREEN)	OCR0A = duty_cycle;
	if (color_type == BLUE)		OCR1A = duty_cycle;
     c4c:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c50:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}

/* PWM output on the RGB LED enable */
void PWM_OUT(int color_type, int duty_cycle)
{
	if (color_type == GREEN)	OCR0A = duty_cycle;
     c54:	87 bd       	out	0x27, r24	; 39
     c56:	08 95       	ret

00000c58 <poll_switch>:

/* Push button pressed check */
uint8_t poll_switch (void)
{
	uint8_t ret_int = 0;
	switch(PIND & ( (1 << SW_MODE) | (1 << SW_ADJUST) | (1 << SW_RGB) ))
     c58:	89 b1       	in	r24, 0x09	; 9
     c5a:	8e 70       	andi	r24, 0x0E	; 14
     c5c:	8a 30       	cpi	r24, 0x0A	; 10
     c5e:	39 f0       	breq	.+14     	; 0xc6e <poll_switch+0x16>
     c60:	8c 30       	cpi	r24, 0x0C	; 12
     c62:	19 f0       	breq	.+6      	; 0xc6a <poll_switch+0x12>
     c64:	86 30       	cpi	r24, 0x06	; 6
     c66:	39 f4       	brne	.+14     	; 0xc76 <poll_switch+0x1e>
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <poll_switch+0x1a>
	{
		case 0b00001100: 
			ret_int = SW_MODE;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret
		break;
		case 0b00001010:  
			ret_int = SW_RGB;
     c6e:	83 e0       	ldi	r24, 0x03	; 3
		break;
     c70:	08 95       	ret
		case 0b00000110: 
			ret_int = SW_ADJUST;
     c72:	82 e0       	ldi	r24, 0x02	; 2
		break;
     c74:	08 95       	ret
}

/* Push button pressed check */
uint8_t poll_switch (void)
{
	uint8_t ret_int = 0;
     c76:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: break;
	}
	
	return ret_int;
}
     c78:	08 95       	ret

00000c7a <ladder_string>:

/* Main menu switch between states */
uint8_t ladder_string(uint8_t current_state, uint8_t operator_in)
{
	uint8_t retvalue = 0;
	switch(current_state)
     c7a:	86 36       	cpi	r24, 0x66	; 102
     c7c:	c9 f1       	breq	.+114    	; 0xcf0 <ladder_string+0x76>
     c7e:	28 f4       	brcc	.+10     	; 0xc8a <ladder_string+0x10>
     c80:	84 36       	cpi	r24, 0x64	; 100
     c82:	61 f0       	breq	.+24     	; 0xc9c <ladder_string+0x22>
     c84:	85 36       	cpi	r24, 0x65	; 101
     c86:	f9 f0       	breq	.+62     	; 0xcc6 <ladder_string+0x4c>
     c88:	84 c0       	rjmp	.+264    	; 0xd92 <ladder_string+0x118>
     c8a:	88 36       	cpi	r24, 0x68	; 104
     c8c:	09 f4       	brne	.+2      	; 0xc90 <ladder_string+0x16>
     c8e:	59 c0       	rjmp	.+178    	; 0xd42 <ladder_string+0xc8>
     c90:	08 f4       	brcc	.+2      	; 0xc94 <ladder_string+0x1a>
     c92:	43 c0       	rjmp	.+134    	; 0xd1a <ladder_string+0xa0>
     c94:	89 36       	cpi	r24, 0x69	; 105
     c96:	09 f4       	brne	.+2      	; 0xc9a <ladder_string+0x20>
     c98:	68 c0       	rjmp	.+208    	; 0xd6a <ladder_string+0xf0>
     c9a:	7b c0       	rjmp	.+246    	; 0xd92 <ladder_string+0x118>
	{
		case MENU_ADJUST:
			if (operator_in == up) 
     c9c:	65 30       	cpi	r22, 0x05	; 5
     c9e:	41 f4       	brne	.+16     	; 0xcb0 <ladder_string+0x36>
			{
			retvalue = MENU_COLORS;
			strcpy(menu_string, COLORS);
     ca0:	6b e8       	ldi	r22, 0x8B	; 139
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
	switch(current_state)
	{
		case MENU_ADJUST:
			if (operator_in == up) 
			{
			retvalue = MENU_COLORS;
     cac:	85 e6       	ldi	r24, 0x65	; 101
     cae:	08 95       	ret
			strcpy(menu_string, COLORS);
			}
			if (operator_in == down)
     cb0:	66 30       	cpi	r22, 0x06	; 6
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <ladder_string+0x3c>
     cb4:	70 c0       	rjmp	.+224    	; 0xd96 <ladder_string+0x11c>
			{
				retvalue = MENU_EXIT;
				strcpy(menu_string, EXIT_MENU);
     cb6:	6e e5       	ldi	r22, 0x5E	; 94
     cb8:	71 e0       	ldi	r23, 0x01	; 1
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = MENU_COLORS;
			strcpy(menu_string, COLORS);
			}
			if (operator_in == down)
			{
				retvalue = MENU_EXIT;
     cc2:	89 e6       	ldi	r24, 0x69	; 105
     cc4:	08 95       	ret
				strcpy(menu_string, EXIT_MENU);
			}
		break;
		
		case MENU_COLORS:
			if (operator_in == up)
     cc6:	65 30       	cpi	r22, 0x05	; 5
     cc8:	41 f4       	brne	.+16     	; 0xcda <ladder_string+0x60>
			{
				retvalue = MENU_ALARM;
				strcpy(menu_string, ALARM);
     cca:	69 e7       	ldi	r22, 0x79	; 121
     ccc:	71 e0       	ldi	r23, 0x01	; 1
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;
		
		case MENU_COLORS:
			if (operator_in == up)
			{
				retvalue = MENU_ALARM;
     cd6:	86 e6       	ldi	r24, 0x66	; 102
     cd8:	08 95       	ret
				strcpy(menu_string, ALARM);
			}
			if (operator_in == down)
     cda:	66 30       	cpi	r22, 0x06	; 6
     cdc:	09 f0       	breq	.+2      	; 0xce0 <ladder_string+0x66>
     cde:	5d c0       	rjmp	.+186    	; 0xd9a <ladder_string+0x120>
			{
				retvalue = MENU_ADJUST;
				strcpy(menu_string, ADJUST);
     ce0:	62 e8       	ldi	r22, 0x82	; 130
     ce2:	71 e0       	ldi	r23, 0x01	; 1
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
				retvalue = MENU_ALARM;
				strcpy(menu_string, ALARM);
			}
			if (operator_in == down)
			{
				retvalue = MENU_ADJUST;
     cec:	84 e6       	ldi	r24, 0x64	; 100
     cee:	08 95       	ret
				strcpy(menu_string, ADJUST);
			}
			break;

		case MENU_ALARM:
			if (operator_in == up)
     cf0:	65 30       	cpi	r22, 0x05	; 5
     cf2:	41 f4       	brne	.+16     	; 0xd04 <ladder_string+0x8a>
			{
				retvalue = MENU_DISPLAY;
				strcpy(menu_string, DISPLAY);
     cf4:	67 e6       	ldi	r22, 0x67	; 103
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			break;

		case MENU_ALARM:
			if (operator_in == up)
			{
				retvalue = MENU_DISPLAY;
     d00:	87 e6       	ldi	r24, 0x67	; 103
     d02:	08 95       	ret
				strcpy(menu_string, DISPLAY);
			}
			if (operator_in == down)
     d04:	66 30       	cpi	r22, 0x06	; 6
     d06:	09 f0       	breq	.+2      	; 0xd0a <ladder_string+0x90>
     d08:	4a c0       	rjmp	.+148    	; 0xd9e <ladder_string+0x124>
			{
				retvalue = MENU_COLORS;
				strcpy(menu_string, COLORS);
     d0a:	6b e8       	ldi	r22, 0x8B	; 139
     d0c:	71 e0       	ldi	r23, 0x01	; 1
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
				retvalue = MENU_DISPLAY;
				strcpy(menu_string, DISPLAY);
			}
			if (operator_in == down)
			{
				retvalue = MENU_COLORS;
     d16:	85 e6       	ldi	r24, 0x65	; 101
     d18:	08 95       	ret
				strcpy(menu_string, COLORS);
			}
			break;		

		case MENU_DISPLAY:
			if (operator_in == up)
     d1a:	65 30       	cpi	r22, 0x05	; 5
     d1c:	41 f4       	brne	.+16     	; 0xd2e <ladder_string+0xb4>
			{
				retvalue = MENU_BUZZER;
				strcpy(menu_string, BUZZER);
     d1e:	60 e7       	ldi	r22, 0x70	; 112
     d20:	71 e0       	ldi	r23, 0x01	; 1
     d22:	84 e0       	ldi	r24, 0x04	; 4
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			break;		

		case MENU_DISPLAY:
			if (operator_in == up)
			{
				retvalue = MENU_BUZZER;
     d2a:	88 e6       	ldi	r24, 0x68	; 104
     d2c:	08 95       	ret
				strcpy(menu_string, BUZZER);
			}
			if (operator_in == down)
     d2e:	66 30       	cpi	r22, 0x06	; 6
     d30:	c1 f5       	brne	.+112    	; 0xda2 <ladder_string+0x128>
			{
				retvalue = MENU_ALARM;
				strcpy(menu_string, ALARM);
     d32:	69 e7       	ldi	r22, 0x79	; 121
     d34:	71 e0       	ldi	r23, 0x01	; 1
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
				retvalue = MENU_BUZZER;
				strcpy(menu_string, BUZZER);
			}
			if (operator_in == down)
			{
				retvalue = MENU_ALARM;
     d3e:	86 e6       	ldi	r24, 0x66	; 102
     d40:	08 95       	ret
				strcpy(menu_string, ALARM);
			}
			break;

		case MENU_BUZZER:
			if (operator_in == up)
     d42:	65 30       	cpi	r22, 0x05	; 5
     d44:	41 f4       	brne	.+16     	; 0xd56 <ladder_string+0xdc>
			{
				retvalue = MENU_EXIT;
				strcpy(menu_string, EXIT_MENU);
     d46:	6e e5       	ldi	r22, 0x5E	; 94
     d48:	71 e0       	ldi	r23, 0x01	; 1
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			break;

		case MENU_BUZZER:
			if (operator_in == up)
			{
				retvalue = MENU_EXIT;
     d52:	89 e6       	ldi	r24, 0x69	; 105
     d54:	08 95       	ret
				strcpy(menu_string, EXIT_MENU);
			}
			if (operator_in == down)
     d56:	66 30       	cpi	r22, 0x06	; 6
     d58:	31 f5       	brne	.+76     	; 0xda6 <ladder_string+0x12c>
			{
				retvalue = MENU_DISPLAY;
				strcpy(menu_string, DISPLAY);
     d5a:	67 e6       	ldi	r22, 0x67	; 103
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
				retvalue = MENU_EXIT;
				strcpy(menu_string, EXIT_MENU);
			}
			if (operator_in == down)
			{
				retvalue = MENU_DISPLAY;
     d66:	87 e6       	ldi	r24, 0x67	; 103
     d68:	08 95       	ret
				strcpy(menu_string, DISPLAY);
			}
			break;		

		case MENU_EXIT:
			if (operator_in == up)
     d6a:	65 30       	cpi	r22, 0x05	; 5
     d6c:	41 f4       	brne	.+16     	; 0xd7e <ladder_string+0x104>
			{
				retvalue = MENU_ADJUST;
				strcpy(menu_string, ADJUST);
     d6e:	62 e8       	ldi	r22, 0x82	; 130
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			break;		

		case MENU_EXIT:
			if (operator_in == up)
			{
				retvalue = MENU_ADJUST;
     d7a:	84 e6       	ldi	r24, 0x64	; 100
     d7c:	08 95       	ret
				strcpy(menu_string, ADJUST);
			}
			if (operator_in == down)
     d7e:	66 30       	cpi	r22, 0x06	; 6
     d80:	a1 f4       	brne	.+40     	; 0xdaa <ladder_string+0x130>
			{
				retvalue = MENU_BUZZER;
				strcpy(menu_string, BUZZER);
     d82:	60 e7       	ldi	r22, 0x70	; 112
     d84:	71 e0       	ldi	r23, 0x01	; 1
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
				retvalue = MENU_ADJUST;
				strcpy(menu_string, ADJUST);
			}
			if (operator_in == down)
			{
				retvalue = MENU_BUZZER;
     d8e:	88 e6       	ldi	r24, 0x68	; 104
     d90:	08 95       	ret
}

/* Main menu switch between states */
uint8_t ladder_string(uint8_t current_state, uint8_t operator_in)
{
	uint8_t retvalue = 0;
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	08 95       	ret
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 95       	ret
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	08 95       	ret
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 95       	ret
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
     daa:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
			default: break;
	}
return retvalue;
}
     dac:	08 95       	ret

00000dae <ladder_string_color>:

/* Color menu switch between states */
uint8_t ladder_string_color(uint8_t current_state, uint8_t operator_in)
{
	uint8_t retvalue = 0;
	switch(current_state)
     dae:	8c 35       	cpi	r24, 0x5C	; 92
     db0:	11 f1       	breq	.+68     	; 0xdf6 <ladder_string_color+0x48>
     db2:	30 f4       	brcc	.+12     	; 0xdc0 <ladder_string_color+0x12>
     db4:	8a 35       	cpi	r24, 0x5A	; 90
     db6:	09 f4       	brne	.+2      	; 0xdba <ladder_string_color+0xc>
     db8:	47 c0       	rjmp	.+142    	; 0xe48 <ladder_string_color+0x9a>
     dba:	8b 35       	cpi	r24, 0x5B	; 91
     dbc:	39 f0       	breq	.+14     	; 0xdcc <ladder_string_color+0x1e>
     dbe:	6c c0       	rjmp	.+216    	; 0xe98 <ladder_string_color+0xea>
     dc0:	8d 35       	cpi	r24, 0x5D	; 93
     dc2:	71 f1       	breq	.+92     	; 0xe20 <ladder_string_color+0x72>
     dc4:	8e 35       	cpi	r24, 0x5E	; 94
     dc6:	09 f4       	brne	.+2      	; 0xdca <ladder_string_color+0x1c>
     dc8:	53 c0       	rjmp	.+166    	; 0xe70 <ladder_string_color+0xc2>
     dca:	66 c0       	rjmp	.+204    	; 0xe98 <ladder_string_color+0xea>
	{
		case R_mode:
		if (operator_in == up)
     dcc:	65 30       	cpi	r22, 0x05	; 5
     dce:	41 f4       	brne	.+16     	; 0xde0 <ladder_string_color+0x32>
		{
			retvalue = G_mode;
			strcpy(menu_string, GREENST);
     dd0:	61 e3       	ldi	r22, 0x31	; 49
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	84 e0       	ldi	r24, 0x04	; 4
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
	switch(current_state)
	{
		case R_mode:
		if (operator_in == up)
		{
			retvalue = G_mode;
     ddc:	8c e5       	ldi	r24, 0x5C	; 92
     dde:	08 95       	ret
			strcpy(menu_string, GREENST);
		}
		if (operator_in == down)
     de0:	66 30       	cpi	r22, 0x06	; 6
     de2:	09 f0       	breq	.+2      	; 0xde6 <ladder_string_color+0x38>
     de4:	5b c0       	rjmp	.+182    	; 0xe9c <ladder_string_color+0xee>
		{
			retvalue = off_mode;
			strcpy(menu_string, OFFST);
     de6:	66 e1       	ldi	r22, 0x16	; 22
     de8:	71 e0       	ldi	r23, 0x01	; 1
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = G_mode;
			strcpy(menu_string, GREENST);
		}
		if (operator_in == down)
		{
			retvalue = off_mode;
     df2:	8e e5       	ldi	r24, 0x5E	; 94
     df4:	08 95       	ret
			strcpy(menu_string, OFFST);
		}
		break;
		
		case G_mode:
		if (operator_in == up)
     df6:	65 30       	cpi	r22, 0x05	; 5
     df8:	41 f4       	brne	.+16     	; 0xe0a <ladder_string_color+0x5c>
		{
			retvalue = B_mode;
			strcpy(menu_string, BLUEST);
     dfa:	68 e2       	ldi	r22, 0x28	; 40
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;
		
		case G_mode:
		if (operator_in == up)
		{
			retvalue = B_mode;
     e06:	8d e5       	ldi	r24, 0x5D	; 93
     e08:	08 95       	ret
			strcpy(menu_string, BLUEST);
		}
		if (operator_in == down)
     e0a:	66 30       	cpi	r22, 0x06	; 6
     e0c:	09 f0       	breq	.+2      	; 0xe10 <ladder_string_color+0x62>
     e0e:	48 c0       	rjmp	.+144    	; 0xea0 <ladder_string_color+0xf2>
		{
			retvalue = R_mode;
			strcpy(menu_string, REDST);
     e10:	6a e3       	ldi	r22, 0x3A	; 58
     e12:	71 e0       	ldi	r23, 0x01	; 1
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = B_mode;
			strcpy(menu_string, BLUEST);
		}
		if (operator_in == down)
		{
			retvalue = R_mode;
     e1c:	8b e5       	ldi	r24, 0x5B	; 91
     e1e:	08 95       	ret
			strcpy(menu_string, REDST);
		}
		break;

		case B_mode:
		if (operator_in == up)
     e20:	65 30       	cpi	r22, 0x05	; 5
     e22:	41 f4       	brne	.+16     	; 0xe34 <ladder_string_color+0x86>
		{
			retvalue = PWM_mode;
			strcpy(menu_string, PWMST);
     e24:	6f e1       	ldi	r22, 0x1F	; 31
     e26:	71 e0       	ldi	r23, 0x01	; 1
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;

		case B_mode:
		if (operator_in == up)
		{
			retvalue = PWM_mode;
     e30:	8a e5       	ldi	r24, 0x5A	; 90
     e32:	08 95       	ret
			strcpy(menu_string, PWMST);
		}
		if (operator_in == down)
     e34:	66 30       	cpi	r22, 0x06	; 6
     e36:	b1 f5       	brne	.+108    	; 0xea4 <ladder_string_color+0xf6>
		{
			retvalue = G_mode;
			strcpy(menu_string, GREENST);
     e38:	61 e3       	ldi	r22, 0x31	; 49
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = PWM_mode;
			strcpy(menu_string, PWMST);
		}
		if (operator_in == down)
		{
			retvalue = G_mode;
     e44:	8c e5       	ldi	r24, 0x5C	; 92
     e46:	08 95       	ret
			strcpy(menu_string, GREENST);
		}
		break;

		case PWM_mode:
		if (operator_in == up)
     e48:	65 30       	cpi	r22, 0x05	; 5
     e4a:	41 f4       	brne	.+16     	; 0xe5c <ladder_string_color+0xae>
		{
			retvalue = off_mode;
			strcpy(menu_string, OFFST);
     e4c:	66 e1       	ldi	r22, 0x16	; 22
     e4e:	71 e0       	ldi	r23, 0x01	; 1
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;

		case PWM_mode:
		if (operator_in == up)
		{
			retvalue = off_mode;
     e58:	8e e5       	ldi	r24, 0x5E	; 94
     e5a:	08 95       	ret
			strcpy(menu_string, OFFST);
		}
		if (operator_in == down)
     e5c:	66 30       	cpi	r22, 0x06	; 6
     e5e:	21 f5       	brne	.+72     	; 0xea8 <ladder_string_color+0xfa>
		{
			retvalue = B_mode;
			strcpy(menu_string, BLUEST);
     e60:	68 e2       	ldi	r22, 0x28	; 40
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	84 e0       	ldi	r24, 0x04	; 4
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = off_mode;
			strcpy(menu_string, OFFST);
		}
		if (operator_in == down)
		{
			retvalue = B_mode;
     e6c:	8d e5       	ldi	r24, 0x5D	; 93
     e6e:	08 95       	ret
			strcpy(menu_string, BLUEST);
		}
		break;

		case off_mode:
		if (operator_in == up)
     e70:	65 30       	cpi	r22, 0x05	; 5
     e72:	41 f4       	brne	.+16     	; 0xe84 <ladder_string_color+0xd6>
		{
			retvalue = R_mode;
			strcpy(menu_string, REDST);
     e74:	6a e3       	ldi	r22, 0x3A	; 58
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;

		case off_mode:
		if (operator_in == up)
		{
			retvalue = R_mode;
     e80:	8b e5       	ldi	r24, 0x5B	; 91
     e82:	08 95       	ret
			strcpy(menu_string, REDST);
		}
		if (operator_in == down)
     e84:	66 30       	cpi	r22, 0x06	; 6
     e86:	91 f4       	brne	.+36     	; 0xeac <ladder_string_color+0xfe>
		{
			retvalue = PWM_mode;
			strcpy(menu_string, PWMST);
     e88:	6f e1       	ldi	r22, 0x1F	; 31
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = R_mode;
			strcpy(menu_string, REDST);
		}
		if (operator_in == down)
		{
			retvalue = PWM_mode;
     e94:	8a e5       	ldi	r24, 0x5A	; 90
     e96:	08 95       	ret
}

/* Color menu switch between states */
uint8_t ladder_string_color(uint8_t current_state, uint8_t operator_in)
{
	uint8_t retvalue = 0;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	08 95       	ret
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	08 95       	ret
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret
     eac:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;

	}
	return retvalue;
}
     eae:	08 95       	ret

00000eb0 <ladder_string_display>:

/* Display menu switch between states */
uint8_t ladder_string_display(uint8_t current_state, uint8_t operator_in)
{
	uint8_t retvalue = 0;
	switch(current_state)
     eb0:	80 36       	cpi	r24, 0x60	; 96
     eb2:	c1 f0       	breq	.+48     	; 0xee4 <ladder_string_display+0x34>
     eb4:	81 36       	cpi	r24, 0x61	; 97
     eb6:	51 f1       	breq	.+84     	; 0xf0c <ladder_string_display+0x5c>
     eb8:	8f 35       	cpi	r24, 0x5F	; 95
     eba:	e1 f5       	brne	.+120    	; 0xf34 <ladder_string_display+0x84>
	{
		case time_mode:
		if (operator_in == up)
     ebc:	65 30       	cpi	r22, 0x05	; 5
     ebe:	41 f4       	brne	.+16     	; 0xed0 <ladder_string_display+0x20>
		{
			retvalue = date_mode;
			strcpy(menu_string, DATEST);
     ec0:	6c e4       	ldi	r22, 0x4C	; 76
     ec2:	71 e0       	ldi	r23, 0x01	; 1
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
	switch(current_state)
	{
		case time_mode:
		if (operator_in == up)
		{
			retvalue = date_mode;
     ecc:	80 e6       	ldi	r24, 0x60	; 96
     ece:	08 95       	ret
			strcpy(menu_string, DATEST);
		}
		if (operator_in == down)
     ed0:	66 30       	cpi	r22, 0x06	; 6
     ed2:	91 f5       	brne	.+100    	; 0xf38 <ladder_string_display+0x88>
		{
			retvalue = both_mode;
			strcpy(menu_string, BOTHST);
     ed4:	63 e4       	ldi	r22, 0x43	; 67
     ed6:	71 e0       	ldi	r23, 0x01	; 1
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = date_mode;
			strcpy(menu_string, DATEST);
		}
		if (operator_in == down)
		{
			retvalue = both_mode;
     ee0:	81 e6       	ldi	r24, 0x61	; 97
     ee2:	08 95       	ret
			strcpy(menu_string, BOTHST);
		}
		break;
		
		case date_mode:
		if (operator_in == up)
     ee4:	65 30       	cpi	r22, 0x05	; 5
     ee6:	41 f4       	brne	.+16     	; 0xef8 <ladder_string_display+0x48>
		{
			retvalue = both_mode;
			strcpy(menu_string, BOTHST);
     ee8:	63 e4       	ldi	r22, 0x43	; 67
     eea:	71 e0       	ldi	r23, 0x01	; 1
     eec:	84 e0       	ldi	r24, 0x04	; 4
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;
		
		case date_mode:
		if (operator_in == up)
		{
			retvalue = both_mode;
     ef4:	81 e6       	ldi	r24, 0x61	; 97
     ef6:	08 95       	ret
			strcpy(menu_string, BOTHST);
		}
		if (operator_in == down)
     ef8:	66 30       	cpi	r22, 0x06	; 6
     efa:	01 f5       	brne	.+64     	; 0xf3c <ladder_string_display+0x8c>
		{
			retvalue = time_mode;
			strcpy(menu_string, TIMEST);
     efc:	65 e5       	ldi	r22, 0x55	; 85
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = both_mode;
			strcpy(menu_string, BOTHST);
		}
		if (operator_in == down)
		{
			retvalue = time_mode;
     f08:	8f e5       	ldi	r24, 0x5F	; 95
     f0a:	08 95       	ret
			strcpy(menu_string, TIMEST);
		}
		break;

		case both_mode:
		if (operator_in == up)
     f0c:	65 30       	cpi	r22, 0x05	; 5
     f0e:	41 f4       	brne	.+16     	; 0xf20 <ladder_string_display+0x70>
		{
			retvalue = time_mode;
			strcpy(menu_string, TIMEST);
     f10:	65 e5       	ldi	r22, 0x55	; 85
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;

		case both_mode:
		if (operator_in == up)
		{
			retvalue = time_mode;
     f1c:	8f e5       	ldi	r24, 0x5F	; 95
     f1e:	08 95       	ret
			strcpy(menu_string, TIMEST);
		}
		if (operator_in == down)
     f20:	66 30       	cpi	r22, 0x06	; 6
     f22:	71 f4       	brne	.+28     	; 0xf40 <ladder_string_display+0x90>
		{
			retvalue = date_mode;
			strcpy(menu_string, DATEST);
     f24:	6c e4       	ldi	r22, 0x4C	; 76
     f26:	71 e0       	ldi	r23, 0x01	; 1
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = time_mode;
			strcpy(menu_string, TIMEST);
		}
		if (operator_in == down)
		{
			retvalue = date_mode;
     f30:	80 e6       	ldi	r24, 0x60	; 96
     f32:	08 95       	ret
}

/* Display menu switch between states */
uint8_t ladder_string_display(uint8_t current_state, uint8_t operator_in)
{
	uint8_t retvalue = 0;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	08 95       	ret
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	08 95       	ret
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret
     f40:	80 e0       	ldi	r24, 0x00	; 0
			strcpy(menu_string, DATEST);
		}
		break;
	}
	return retvalue;
}
     f42:	08 95       	ret

00000f44 <enable_led_alarm>:
}

/* Enable Alarm LED #1 */
void enable_led_alarm(void)
{
	stop_timers();
     f44:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
	PORTD |=  (1 << RED);
     f48:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~(1 << GREEN);
     f4a:	5e 98       	cbi	0x0b, 6	; 11
	PORTB &= ~(1 << BLUE);
     f4c:	29 98       	cbi	0x05, 1	; 5
     f4e:	08 95       	ret

00000f50 <disable_led_alarm>:
}

/* Enable Alarm LED #2 */
void disable_led_alarm(void)
{
	stop_timers();
     f50:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
	PORTD &= ~(1 << RED);
     f54:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |=  (1 << GREEN);
     f56:	5e 9a       	sbi	0x0b, 6	; 11
	PORTB &= ~(1 << BLUE);
     f58:	29 98       	cbi	0x05, 1	; 5
     f5a:	08 95       	ret

00000f5c <alarm_begin>:
}

/* Enable Alarm */
void alarm_begin (void)
{
     f5c:	cf 93       	push	r28
     f5e:	cc e3       	ldi	r28, 0x3C	; 60
	for (uint8_t ixz = 0; ixz < 60; ixz++)
	{
		if (poll_switch() == SW_MODE) 
     f60:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	29 f4       	brne	.+10     	; 0xf72 <alarm_begin+0x16>
		{
			while(poll_switch() == SW_MODE);
     f68:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	e1 f3       	breq	.-8      	; 0xf68 <alarm_begin+0xc>
     f70:	3b c0       	rjmp	.+118    	; 0xfe8 <alarm_begin+0x8c>
		break;
		}
		open_matrix_SPI();
     f72:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
		print_string("WAKE UP ");
     f76:	81 ef       	ldi	r24, 0xF1	; 241
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
		close_matrix_SPI();
     f7e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
		enable_led_alarm();
     f82:	0e 94 a2 07 	call	0xf44	; 0xf44 <enable_led_alarm>
     f86:	88 ee       	ldi	r24, 0xE8	; 232
     f88:	93 e0       	ldi	r25, 0x03	; 3
		for (uint16_t xin = 0; xin < 1000; xin++)
		{
			PORTD |= (1 << 0);
     f8a:	58 9a       	sbi	0x0b, 0	; 11
     f8c:	e3 ef       	ldi	r30, 0xF3	; 243
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	31 97       	sbiw	r30, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <alarm_begin+0x34>
     f94:	00 c0       	rjmp	.+0      	; 0xf96 <alarm_begin+0x3a>
     f96:	00 00       	nop
			_delay_us(250);
			PORTD &=~(1 << 0);
     f98:	58 98       	cbi	0x0b, 0	; 11
     f9a:	e3 ef       	ldi	r30, 0xF3	; 243
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <alarm_begin+0x42>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <alarm_begin+0x48>
     fa4:	00 00       	nop
     fa6:	01 97       	sbiw	r24, 0x01	; 1
		}
		open_matrix_SPI();
		print_string("WAKE UP ");
		close_matrix_SPI();
		enable_led_alarm();
		for (uint16_t xin = 0; xin < 1000; xin++)
     fa8:	81 f7       	brne	.-32     	; 0xf8a <alarm_begin+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     faa:	ff e7       	ldi	r31, 0x7F	; 127
     fac:	28 e3       	ldi	r18, 0x38	; 56
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	f1 50       	subi	r31, 0x01	; 1
     fb2:	20 40       	sbci	r18, 0x00	; 0
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <alarm_begin+0x54>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <alarm_begin+0x5e>
     fba:	00 00       	nop
			PORTD &=~(1 << 0);
			_delay_us(250);
			
		}
		_delay_ms(50);
		disable_led_alarm();
     fbc:	0e 94 a8 07 	call	0xf50	; 0xf50 <disable_led_alarm>
		open_matrix_SPI();
     fc0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
		print_string("  NOW!  ");
     fc4:	8a ef       	ldi	r24, 0xFA	; 250
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
		close_matrix_SPI();
     fcc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
     fd0:	9f ef       	ldi	r25, 0xFF	; 255
     fd2:	e2 e5       	ldi	r30, 0x52	; 82
     fd4:	f7 e0       	ldi	r31, 0x07	; 7
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	e0 40       	sbci	r30, 0x00	; 0
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <alarm_begin+0x7a>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <alarm_begin+0x84>
     fe0:	00 00       	nop
     fe2:	c1 50       	subi	r28, 0x01	; 1
}

/* Enable Alarm */
void alarm_begin (void)
{
	for (uint8_t ixz = 0; ixz < 60; ixz++)
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <alarm_begin+0x8c>
     fe6:	bc cf       	rjmp	.-136    	; 0xf60 <alarm_begin+0x4>
		open_matrix_SPI();
		print_string("  NOW!  ");
		close_matrix_SPI();
		_delay_ms(300);
	}
	Init_RGB_LED();
     fe8:	0e 94 d3 05 	call	0xba6	; 0xba6 <Init_RGB_LED>
}
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <beep>:

/* Buzzer single "beep" generation */
void beep (uint8_t buzzer_in)
{
     ff0:	22 e3       	ldi	r18, 0x32	; 50
     ff2:	30 e0       	ldi	r19, 0x00	; 0
	for (uint16_t sn = 0; sn < 50; sn++)
	{
		if (buzzer_in == buzzer_on)
     ff4:	82 36       	cpi	r24, 0x62	; 98
     ff6:	71 f4       	brne	.+28     	; 0x1014 <beep+0x24>
		{
			PORTD |= (1 << 0);
     ff8:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ffa:	e3 ef       	ldi	r30, 0xF3	; 243
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	31 97       	sbiw	r30, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <beep+0xe>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <beep+0x14>
    1004:	00 00       	nop
			_delay_us(250);
			PORTD &=~(1 << 0);
    1006:	58 98       	cbi	0x0b, 0	; 11
    1008:	e3 ef       	ldi	r30, 0xF3	; 243
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	31 97       	sbiw	r30, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <beep+0x1c>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <beep+0x22>
    1012:	00 00       	nop
    1014:	21 50       	subi	r18, 0x01	; 1
    1016:	31 09       	sbc	r19, r1
}

/* Buzzer single "beep" generation */
void beep (uint8_t buzzer_in)
{
	for (uint16_t sn = 0; sn < 50; sn++)
    1018:	69 f7       	brne	.-38     	; 0xff4 <beep+0x4>
			PORTD &=~(1 << 0);
			_delay_us(250);
		}
		else ;
	}
}
    101a:	08 95       	ret

0000101c <menu_mode>:
	return retvalue;
}

/* Main menu modes function */
uint8_t menu_mode (void)
{
    101c:	cf 93       	push	r28
	uint8_t current_state = MENU_ADJUST;
	strcpy(menu_string,ADJUST); 
    101e:	62 e8       	ldi	r22, 0x82	; 130
    1020:	71 e0       	ldi	r23, 0x01	; 1
    1022:	84 e0       	ldi	r24, 0x04	; 4
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
}

/* Main menu modes function */
uint8_t menu_mode (void)
{
	uint8_t current_state = MENU_ADJUST;
    102a:	c4 e6       	ldi	r28, 0x64	; 100
	strcpy(menu_string,ADJUST); 
	uint8_t out_confirm_x = 0;
			while(out_confirm_x == 0)
			{
				open_matrix_SPI();
    102c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
				print_string(menu_string);
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
				close_matrix_SPI();
    1038:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) 
    103c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	49 f4       	brne	.+18     	; 0x1056 <menu_mode+0x3a>
				{
					beep(buzzer_state);
    1044:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1048:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    104c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	e1 f3       	breq	.-8      	; 0x104c <menu_mode+0x30>
    1054:	24 c0       	rjmp	.+72     	; 0x109e <menu_mode+0x82>
					out_confirm_x = 1;
				}
				else if (poll_switch() == SW_ADJUST) 
    1056:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	71 f4       	brne	.+28     	; 0x107a <menu_mode+0x5e>
				{
					beep(buzzer_state);
    105e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1062:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    1066:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	e1 f3       	breq	.-8      	; 0x1066 <menu_mode+0x4a>
					current_state = ladder_string(current_state, up);
    106e:	65 e0       	ldi	r22, 0x05	; 5
    1070:	8c 2f       	mov	r24, r28
    1072:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ladder_string>
    1076:	c8 2f       	mov	r28, r24
    1078:	d9 cf       	rjmp	.-78     	; 0x102c <menu_mode+0x10>
				}
				else if (poll_switch() == SW_RGB)
    107a:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	a9 f6       	brne	.-86     	; 0x102c <menu_mode+0x10>
				{
					beep(buzzer_state);
    1082:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1086:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_RGB);
    108a:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	e1 f3       	breq	.-8      	; 0x108a <menu_mode+0x6e>
					current_state = ladder_string(current_state, down);
    1092:	66 e0       	ldi	r22, 0x06	; 6
    1094:	8c 2f       	mov	r24, r28
    1096:	0e 94 3d 06 	call	0xc7a	; 0xc7a <ladder_string>
    109a:	c8 2f       	mov	r28, r24
    109c:	c7 cf       	rjmp	.-114    	; 0x102c <menu_mode+0x10>
				}
			}
return current_state;
}
    109e:	8c 2f       	mov	r24, r28
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <menu_mode_display>:

/* Display mode menu function */
uint8_t menu_mode_display(void)
{
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
//	int rcnt = 0;
	uint8_t current_state = time_mode;
//	uint8_t ret_val = 0;
	strcpy(menu_string,TIMEST);
    10ac:	65 e5       	ldi	r22, 0x55	; 85
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>

/* Display mode menu function */
uint8_t menu_mode_display(void)
{
//	int rcnt = 0;
	uint8_t current_state = time_mode;
    10b8:	1f e5       	ldi	r17, 0x5F	; 95
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (poll_switch() == SW_MODE)
		{
			beep(buzzer_state);
			while(poll_switch() == SW_MODE);
			out_confirm_x = 1;
    10bc:	01 e0       	ldi	r16, 0x01	; 1
//	uint8_t ret_val = 0;
	strcpy(menu_string,TIMEST);
	uint8_t out_confirm_x = 0;
	while(out_confirm_x == 0)
	{
		open_matrix_SPI();
    10be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
		print_string(menu_string);
    10c2:	84 e0       	ldi	r24, 0x04	; 4
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
		close_matrix_SPI();
    10ca:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
		
		if (poll_switch() == SW_MODE)
    10ce:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	51 f4       	brne	.+20     	; 0x10ea <menu_mode_display+0x46>
		{
			beep(buzzer_state);
    10d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    10da:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_MODE);
    10de:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	e1 f3       	breq	.-8      	; 0x10de <menu_mode_display+0x3a>
			out_confirm_x = 1;
    10e6:	c0 2f       	mov	r28, r16
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <menu_mode_display+0x48>
    10ea:	cd 2f       	mov	r28, r29
		}
		if (poll_switch() == SW_ADJUST)
    10ec:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	71 f4       	brne	.+28     	; 0x1110 <menu_mode_display+0x6c>
		{
			beep(buzzer_state);
    10f4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    10f8:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_ADJUST);
    10fc:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	e1 f3       	breq	.-8      	; 0x10fc <menu_mode_display+0x58>
			current_state = ladder_string_display(current_state, up);
    1104:	65 e0       	ldi	r22, 0x05	; 5
    1106:	81 2f       	mov	r24, r17
    1108:	0e 94 58 07 	call	0xeb0	; 0xeb0 <ladder_string_display>
    110c:	18 2f       	mov	r17, r24
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <menu_mode_display+0x8e>
		}
		else if (poll_switch() == SW_RGB)
    1110:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	69 f4       	brne	.+26     	; 0x1132 <menu_mode_display+0x8e>
		{
			beep(buzzer_state);
    1118:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    111c:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_RGB);
    1120:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	e1 f3       	breq	.-8      	; 0x1120 <menu_mode_display+0x7c>
			current_state = ladder_string_display(current_state, down);
    1128:	66 e0       	ldi	r22, 0x06	; 6
    112a:	81 2f       	mov	r24, r17
    112c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <ladder_string_display>
    1130:	18 2f       	mov	r17, r24
//	int rcnt = 0;
	uint8_t current_state = time_mode;
//	uint8_t ret_val = 0;
	strcpy(menu_string,TIMEST);
	uint8_t out_confirm_x = 0;
	while(out_confirm_x == 0)
    1132:	cc 23       	and	r28, r28
    1134:	21 f2       	breq	.-120    	; 0x10be <menu_mode_display+0x1a>
			while(poll_switch() == SW_RGB);
			current_state = ladder_string_display(current_state, down);
		}
	}
	return current_state;
}
    1136:	81 2f       	mov	r24, r17
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <menu_mode_color>:

/* Color menu function */
uint8_t menu_mode_color (void)
{
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
	int colorcnt = 0;
	uint8_t current_state = R_mode;
	strcpy(menu_string,REDST);
    114e:	6a e3       	ldi	r22, 0x3A	; 58
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	84 e0       	ldi	r24, 0x04	; 4
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>

/* Color menu function */
uint8_t menu_mode_color (void)
{
	int colorcnt = 0;
	uint8_t current_state = R_mode;
    115a:	cb e5       	ldi	r28, 0x5B	; 91
}

/* Color menu function */
uint8_t menu_mode_color (void)
{
	int colorcnt = 0;
    115c:	e1 2c       	mov	r14, r1
    115e:	f1 2c       	mov	r15, r1
    1160:	10 e0       	ldi	r17, 0x00	; 0
		
		if (poll_switch() == SW_MODE)
		{
			beep(buzzer_state);
			while(poll_switch() == SW_MODE);
			out_confirm_x = 1;
    1162:	01 e0       	ldi	r16, 0x01	; 1
	uint8_t current_state = R_mode;
	strcpy(menu_string,REDST);
	uint8_t out_confirm_x = 0;
	while(out_confirm_x == 0)
	{
		open_matrix_SPI();
    1164:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
		print_string(menu_string);
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
		close_matrix_SPI();
    1170:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
		if (current_state == PWM_mode)
    1174:	ca 35       	cpi	r28, 0x5A	; 90
    1176:	81 f4       	brne	.+32     	; 0x1198 <menu_mode_color+0x56>
		{
			Init_RGB_LED();
    1178:	0e 94 d3 05 	call	0xba6	; 0xba6 <Init_RGB_LED>
			showRGB(colorcnt);
    117c:	c7 01       	movw	r24, r14
    117e:	0e 94 03 06 	call	0xc06	; 0xc06 <showRGB>
			if (colorcnt == 767) colorcnt = 0;
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	e8 16       	cp	r14, r24
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	f8 06       	cpc	r15, r24
    118a:	11 f4       	brne	.+4      	; 0x1190 <menu_mode_color+0x4e>
    118c:	e1 2c       	mov	r14, r1
    118e:	f1 2c       	mov	r15, r1
			colorcnt++;			
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	e8 1a       	sub	r14, r24
    1194:	f8 0a       	sbc	r15, r24
    1196:	1f c0       	rjmp	.+62     	; 0x11d6 <menu_mode_color+0x94>
		}
		else if (current_state == R_mode)
    1198:	cb 35       	cpi	r28, 0x5B	; 91
    119a:	31 f4       	brne	.+12     	; 0x11a8 <menu_mode_color+0x66>
		{
			stop_timers();
    119c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
			PORTD |=  (1 << RED);
    11a0:	5d 9a       	sbi	0x0b, 5	; 11
			PORTD &= ~(1 << GREEN);
    11a2:	5e 98       	cbi	0x0b, 6	; 11
			PORTB &= ~(1 << BLUE);
    11a4:	29 98       	cbi	0x05, 1	; 5
    11a6:	17 c0       	rjmp	.+46     	; 0x11d6 <menu_mode_color+0x94>
		}
		else if (current_state == G_mode)
    11a8:	cc 35       	cpi	r28, 0x5C	; 92
    11aa:	31 f4       	brne	.+12     	; 0x11b8 <menu_mode_color+0x76>
		{
			stop_timers();
    11ac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
			PORTD &= ~(1 << RED);
    11b0:	5d 98       	cbi	0x0b, 5	; 11
			PORTD |= (1 << GREEN);
    11b2:	5e 9a       	sbi	0x0b, 6	; 11
			PORTB &= ~(1 << BLUE);
    11b4:	29 98       	cbi	0x05, 1	; 5
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <menu_mode_color+0x94>
		}
		else if (current_state == B_mode)
    11b8:	cd 35       	cpi	r28, 0x5D	; 93
    11ba:	31 f4       	brne	.+12     	; 0x11c8 <menu_mode_color+0x86>
		{
			stop_timers();
    11bc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
			PORTD &= ~(1 << RED);
    11c0:	5d 98       	cbi	0x0b, 5	; 11
			PORTD &= ~(1 << GREEN);
    11c2:	5e 98       	cbi	0x0b, 6	; 11
			PORTB |= (1 << BLUE);
    11c4:	29 9a       	sbi	0x05, 1	; 5
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <menu_mode_color+0x94>
		}
		else if (current_state == off_mode)
    11c8:	ce 35       	cpi	r28, 0x5E	; 94
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <menu_mode_color+0x94>
		{
			stop_timers();
    11cc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
			PORTD &= ~(1 << RED);
    11d0:	5d 98       	cbi	0x0b, 5	; 11
			PORTD &= ~(1 << GREEN);
    11d2:	5e 98       	cbi	0x0b, 6	; 11
			PORTB &= ~(1 << BLUE);
    11d4:	29 98       	cbi	0x05, 1	; 5
		}		
		
		if (poll_switch() == SW_MODE)
    11d6:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	51 f4       	brne	.+20     	; 0x11f2 <menu_mode_color+0xb0>
		{
			beep(buzzer_state);
    11de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    11e2:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_MODE);
    11e6:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	e1 f3       	breq	.-8      	; 0x11e6 <menu_mode_color+0xa4>
			out_confirm_x = 1;
    11ee:	d0 2f       	mov	r29, r16
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <menu_mode_color+0xb2>
    11f2:	d1 2f       	mov	r29, r17
		}
		if (poll_switch() == SW_ADJUST)
    11f4:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	71 f4       	brne	.+28     	; 0x1218 <menu_mode_color+0xd6>
		{
			beep(buzzer_state);
    11fc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1200:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_ADJUST);
    1204:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	e1 f3       	breq	.-8      	; 0x1204 <menu_mode_color+0xc2>
			current_state = ladder_string_color(current_state, up);
    120c:	65 e0       	ldi	r22, 0x05	; 5
    120e:	8c 2f       	mov	r24, r28
    1210:	0e 94 d7 06 	call	0xdae	; 0xdae <ladder_string_color>
    1214:	c8 2f       	mov	r28, r24
    1216:	11 c0       	rjmp	.+34     	; 0x123a <menu_mode_color+0xf8>
		}
		else if (poll_switch() == SW_RGB)
    1218:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	69 f4       	brne	.+26     	; 0x123a <menu_mode_color+0xf8>
		{
			beep(buzzer_state);
    1220:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1224:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_RGB);
    1228:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	e1 f3       	breq	.-8      	; 0x1228 <menu_mode_color+0xe6>
			current_state = ladder_string_color(current_state, down);
    1230:	66 e0       	ldi	r22, 0x06	; 6
    1232:	8c 2f       	mov	r24, r28
    1234:	0e 94 d7 06 	call	0xdae	; 0xdae <ladder_string_color>
    1238:	c8 2f       	mov	r28, r24
{
	int colorcnt = 0;
	uint8_t current_state = R_mode;
	strcpy(menu_string,REDST);
	uint8_t out_confirm_x = 0;
	while(out_confirm_x == 0)
    123a:	dd 23       	and	r29, r29
    123c:	09 f4       	brne	.+2      	; 0x1240 <menu_mode_color+0xfe>
    123e:	92 cf       	rjmp	.-220    	; 0x1164 <menu_mode_color+0x22>
			while(poll_switch() == SW_RGB);
			current_state = ladder_string_color(current_state, down);
		}
	}
	return current_state;
}
    1240:	8c 2f       	mov	r24, r28
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <adjust_mode>:

/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
	uint8_t ret_value = 0;
	out_confirm = 0;
    125a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
	switch(parameter_in)
    125e:	80 32       	cpi	r24, 0x20	; 32
    1260:	09 f4       	brne	.+2      	; 0x1264 <adjust_mode+0x14>
    1262:	b5 c0       	rjmp	.+362    	; 0x13ce <adjust_mode+0x17e>
    1264:	30 f4       	brcc	.+12     	; 0x1272 <adjust_mode+0x22>
    1266:	8e 31       	cpi	r24, 0x1E	; 30
    1268:	69 f0       	breq	.+26     	; 0x1284 <adjust_mode+0x34>
    126a:	8f 31       	cpi	r24, 0x1F	; 31
    126c:	09 f4       	brne	.+2      	; 0x1270 <adjust_mode+0x20>
    126e:	5c c0       	rjmp	.+184    	; 0x1328 <adjust_mode+0xd8>
    1270:	0a c2       	rjmp	.+1044   	; 0x1686 <adjust_mode+0x436>
    1272:	82 32       	cpi	r24, 0x22	; 34
    1274:	09 f4       	brne	.+2      	; 0x1278 <adjust_mode+0x28>
    1276:	59 c1       	rjmp	.+690    	; 0x152a <adjust_mode+0x2da>
    1278:	08 f4       	brcc	.+2      	; 0x127c <adjust_mode+0x2c>
    127a:	fc c0       	rjmp	.+504    	; 0x1474 <adjust_mode+0x224>
    127c:	83 32       	cpi	r24, 0x23	; 35
    127e:	09 f4       	brne	.+2      	; 0x1282 <adjust_mode+0x32>
    1280:	af c1       	rjmp	.+862    	; 0x15e0 <adjust_mode+0x390>
    1282:	01 c2       	rjmp	.+1026   	; 0x1686 <adjust_mode+0x436>
    1284:	c0 e0       	ldi	r28, 0x00	; 0
			while(out_confirm == 0) // Wait until OK
			{
				open_matrix_SPI();
				print_string("<SEC:");
				int_to_ascii(ret_value);
				Print_Character(buf[0]);
    1286:	0b e2       	ldi	r16, 0x2B	; 43
    1288:	12 e0       	ldi	r17, 0x02	; 2
				close_matrix_SPI();
				if (poll_switch() == SW_MODE) // Exit from state
				{
					beep(buzzer_state);
					while(poll_switch() == SW_MODE);
					out_confirm = 1;
    128a:	d1 e0       	ldi	r29, 0x01	; 1
	switch(parameter_in)
	{
		case SEC_state:
			while(out_confirm == 0) // Wait until OK
			{
				open_matrix_SPI();
    128c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
				print_string("<SEC:");
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	92 e0       	ldi	r25, 0x02	; 2
    1294:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
				int_to_ascii(ret_value);
    1298:	8c 2f       	mov	r24, r28
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
				Print_Character(buf[0]);
    12a0:	f8 01       	movw	r30, r16
    12a2:	80 81       	ld	r24, Z
    12a4:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
				Print_Character(buf[1]);
    12a8:	f8 01       	movw	r30, r16
    12aa:	81 81       	ldd	r24, Z+1	; 0x01
    12ac:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
				Print_Character('>');
    12b0:	8e e3       	ldi	r24, 0x3E	; 62
    12b2:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
				close_matrix_SPI();
    12b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) // Exit from state
    12ba:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	51 f4       	brne	.+20     	; 0x12d6 <adjust_mode+0x86>
				{
					beep(buzzer_state);
    12c2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    12c6:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    12ca:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	e1 f3       	breq	.-8      	; 0x12ca <adjust_mode+0x7a>
					out_confirm = 1;
    12d2:	d0 93 28 02 	sts	0x0228, r29	; 0x800228 <__data_end>
				}
			    if (poll_switch() == SW_ADJUST) 
    12d6:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	61 f4       	brne	.+24     	; 0x12f6 <adjust_mode+0xa6>
				{
					beep(buzzer_state);
    12de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    12e2:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    12e6:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	e1 f3       	breq	.-8      	; 0x12e6 <adjust_mode+0x96>
					if (ret_value > 59)  ret_value = 0;
    12ee:	cc 33       	cpi	r28, 0x3C	; 60
    12f0:	90 f4       	brcc	.+36     	; 0x1316 <adjust_mode+0xc6>
					else ret_value++;
    12f2:	cf 5f       	subi	r28, 0xFF	; 255
    12f4:	13 c0       	rjmp	.+38     	; 0x131c <adjust_mode+0xcc>
				}
				else if (poll_switch() == SW_RGB) // OK and save appropriate values.
    12f6:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	79 f4       	brne	.+30     	; 0x131c <adjust_mode+0xcc>
				{
					beep(buzzer_state);
    12fe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1302:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_RGB);
    1306:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	e1 f3       	breq	.-8      	; 0x1306 <adjust_mode+0xb6>
					if (ret_value <= 0)  ret_value = 59;
    130e:	cc 23       	and	r28, r28
    1310:	21 f0       	breq	.+8      	; 0x131a <adjust_mode+0xca>
					else ret_value--;
    1312:	c1 50       	subi	r28, 0x01	; 1
    1314:	03 c0       	rjmp	.+6      	; 0x131c <adjust_mode+0xcc>
				}
			    if (poll_switch() == SW_ADJUST) 
				{
					beep(buzzer_state);
					while(poll_switch() == SW_ADJUST);
					if (ret_value > 59)  ret_value = 0;
    1316:	c0 e0       	ldi	r28, 0x00	; 0
    1318:	01 c0       	rjmp	.+2      	; 0x131c <adjust_mode+0xcc>
				}
				else if (poll_switch() == SW_RGB) // OK and save appropriate values.
				{
					beep(buzzer_state);
					while(poll_switch() == SW_RGB);
					if (ret_value <= 0)  ret_value = 59;
    131a:	cb e3       	ldi	r28, 0x3B	; 59
	uint8_t ret_value = 0;
	out_confirm = 0;
	switch(parameter_in)
	{
		case SEC_state:
			while(out_confirm == 0) // Wait until OK
    131c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1320:	88 23       	and	r24, r24
    1322:	09 f4       	brne	.+2      	; 0x1326 <adjust_mode+0xd6>
    1324:	b3 cf       	rjmp	.-154    	; 0x128c <adjust_mode+0x3c>
    1326:	b0 c1       	rjmp	.+864    	; 0x1688 <adjust_mode+0x438>
/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
	uint8_t ret_value = 0;
	out_confirm = 0;
	switch(parameter_in)
    1328:	c0 e0       	ldi	r28, 0x00	; 0
			while(out_confirm == 0) // Wait until OK
			{
				open_matrix_SPI();
				print_string("<MIN:");
				int_to_ascii(ret_value);
				Print_Character(buf[0]);
    132a:	0b e2       	ldi	r16, 0x2B	; 43
    132c:	12 e0       	ldi	r17, 0x02	; 2
			break;
		
			case MIN_state:
			while(out_confirm == 0) // Wait until OK
			{
				open_matrix_SPI();
    132e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
				print_string("<MIN:");
    1332:	89 e0       	ldi	r24, 0x09	; 9
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
				int_to_ascii(ret_value);
    133a:	8c 2f       	mov	r24, r28
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
				Print_Character(buf[0]);
    1342:	f8 01       	movw	r30, r16
    1344:	80 81       	ld	r24, Z
    1346:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
				Print_Character(buf[1]);
    134a:	f8 01       	movw	r30, r16
    134c:	81 81       	ldd	r24, Z+1	; 0x01
    134e:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
				Print_Character('>');
    1352:	8e e3       	ldi	r24, 0x3E	; 62
    1354:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
				close_matrix_SPI();
    1358:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) // Exit from state
    135c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	61 f4       	brne	.+24     	; 0x137c <adjust_mode+0x12c>
				{			
					beep(buzzer_state);		
    1364:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1368:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    136c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	e1 f3       	breq	.-8      	; 0x136c <adjust_mode+0x11c>
					out_confirm = 1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    137a:	86 c1       	rjmp	.+780    	; 0x1688 <adjust_mode+0x438>
				}
				else if (poll_switch() == SW_ADJUST) 
    137c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	61 f4       	brne	.+24     	; 0x139c <adjust_mode+0x14c>
				{
					beep(buzzer_state);
    1384:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1388:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    138c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	e1 f3       	breq	.-8      	; 0x138c <adjust_mode+0x13c>
					if (ret_value > 59)  ret_value = 0;
    1394:	cc 33       	cpi	r28, 0x3C	; 60
    1396:	90 f4       	brcc	.+36     	; 0x13bc <adjust_mode+0x16c>
					else ret_value++;
    1398:	cf 5f       	subi	r28, 0xFF	; 255
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <adjust_mode+0x172>
				}
				else if (poll_switch() == SW_RGB) // OK and save appropriate values.
    139c:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	79 f4       	brne	.+30     	; 0x13c2 <adjust_mode+0x172>
				{
					beep(buzzer_state);
    13a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    13a8:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_RGB);
    13ac:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	e1 f3       	breq	.-8      	; 0x13ac <adjust_mode+0x15c>
					if (ret_value <= 0)  ret_value = 59;
    13b4:	cc 23       	and	r28, r28
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <adjust_mode+0x170>
					else ret_value--;
    13b8:	c1 50       	subi	r28, 0x01	; 1
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <adjust_mode+0x172>
				}
				else if (poll_switch() == SW_ADJUST) 
				{
					beep(buzzer_state);
					while(poll_switch() == SW_ADJUST);
					if (ret_value > 59)  ret_value = 0;
    13bc:	c0 e0       	ldi	r28, 0x00	; 0
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <adjust_mode+0x172>
				}
				else if (poll_switch() == SW_RGB) // OK and save appropriate values.
				{
					beep(buzzer_state);
					while(poll_switch() == SW_RGB);
					if (ret_value <= 0)  ret_value = 59;
    13c0:	cb e3       	ldi	r28, 0x3B	; 59
				}
			}
			break;
		
			case MIN_state:
			while(out_confirm == 0) // Wait until OK
    13c2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    13c6:	88 23       	and	r24, r24
    13c8:	09 f4       	brne	.+2      	; 0x13cc <adjust_mode+0x17c>
    13ca:	b1 cf       	rjmp	.-158    	; 0x132e <adjust_mode+0xde>
    13cc:	5d c1       	rjmp	.+698    	; 0x1688 <adjust_mode+0x438>
/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
	uint8_t ret_value = 0;
	out_confirm = 0;
	switch(parameter_in)
    13ce:	c0 e0       	ldi	r28, 0x00	; 0
		while(out_confirm == 0) // Wait until OK
		{
			open_matrix_SPI();
			print_string("<HR: ");
			int_to_ascii(ret_value);
			Print_Character(buf[0]);
    13d0:	0b e2       	ldi	r16, 0x2B	; 43
    13d2:	12 e0       	ldi	r17, 0x02	; 2
			break;
		
		case HOUR_state:
		while(out_confirm == 0) // Wait until OK
		{
			open_matrix_SPI();
    13d4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
			print_string("<HR: ");
    13d8:	8f e0       	ldi	r24, 0x0F	; 15
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
			int_to_ascii(ret_value);
    13e0:	8c 2f       	mov	r24, r28
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
			Print_Character(buf[0]);
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character(buf[1]);
    13f0:	f8 01       	movw	r30, r16
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character('>');
    13f8:	8e e3       	ldi	r24, 0x3E	; 62
    13fa:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			close_matrix_SPI();
    13fe:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) // Exit from state
    1402:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	61 f4       	brne	.+24     	; 0x1422 <adjust_mode+0x1d2>
				{
					beep(buzzer_state);
    140a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    140e:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    1412:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	e1 f3       	breq	.-8      	; 0x1412 <adjust_mode+0x1c2>
					out_confirm = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    1420:	33 c1       	rjmp	.+614    	; 0x1688 <adjust_mode+0x438>
				}
				else if (poll_switch() == SW_ADJUST) 
    1422:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	61 f4       	brne	.+24     	; 0x1442 <adjust_mode+0x1f2>
				{
					beep(buzzer_state);
    142a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    142e:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    1432:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	e1 f3       	breq	.-8      	; 0x1432 <adjust_mode+0x1e2>
				if (ret_value > 23)  ret_value = 0;
    143a:	c8 31       	cpi	r28, 0x18	; 24
    143c:	90 f4       	brcc	.+36     	; 0x1462 <adjust_mode+0x212>
				else ret_value++;
    143e:	cf 5f       	subi	r28, 0xFF	; 255
    1440:	13 c0       	rjmp	.+38     	; 0x1468 <adjust_mode+0x218>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
    1442:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	79 f4       	brne	.+30     	; 0x1468 <adjust_mode+0x218>
			{
				beep(buzzer_state);
    144a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    144e:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
				while(poll_switch() == SW_RGB);
    1452:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	e1 f3       	breq	.-8      	; 0x1452 <adjust_mode+0x202>
				if (ret_value <= 0)  ret_value = 23;
    145a:	cc 23       	and	r28, r28
    145c:	21 f0       	breq	.+8      	; 0x1466 <adjust_mode+0x216>
				else ret_value--;
    145e:	c1 50       	subi	r28, 0x01	; 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <adjust_mode+0x218>
				}
				else if (poll_switch() == SW_ADJUST) 
				{
					beep(buzzer_state);
					while(poll_switch() == SW_ADJUST);
				if (ret_value > 23)  ret_value = 0;
    1462:	c0 e0       	ldi	r28, 0x00	; 0
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <adjust_mode+0x218>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
			{
				beep(buzzer_state);
				while(poll_switch() == SW_RGB);
				if (ret_value <= 0)  ret_value = 23;
    1466:	c7 e1       	ldi	r28, 0x17	; 23
				}
			}	
			break;
		
		case HOUR_state:
		while(out_confirm == 0) // Wait until OK
    1468:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    146c:	88 23       	and	r24, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <adjust_mode+0x222>
    1470:	b1 cf       	rjmp	.-158    	; 0x13d4 <adjust_mode+0x184>
    1472:	0a c1       	rjmp	.+532    	; 0x1688 <adjust_mode+0x438>
/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
	uint8_t ret_value = 0;
	out_confirm = 0;
	switch(parameter_in)
    1474:	c0 e0       	ldi	r28, 0x00	; 0
		break;
		
		case DAY_state:
		while(out_confirm == 0) // Wait until OK
		{
			buf[0] = '1';
    1476:	0b e2       	ldi	r16, 0x2B	; 43
    1478:	12 e0       	ldi	r17, 0x02	; 2
    147a:	0f 2e       	mov	r0, r31
    147c:	f1 e3       	ldi	r31, 0x31	; 49
    147e:	ff 2e       	mov	r15, r31
    1480:	f0 2d       	mov	r31, r0
			buf[1] = '0';
    1482:	d0 e3       	ldi	r29, 0x30	; 48
		break;
		
		case DAY_state:
		while(out_confirm == 0) // Wait until OK
		{
			buf[0] = '1';
    1484:	f8 01       	movw	r30, r16
    1486:	f0 82       	st	Z, r15
			buf[1] = '0';
    1488:	d1 83       	std	Z+1, r29	; 0x01
			open_matrix_SPI();
    148a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
			print_string("<DAY:");
    148e:	85 e1       	ldi	r24, 0x15	; 21
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
			int_to_ascii(ret_value);
    1496:	8c 2f       	mov	r24, r28
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
			Print_Character(buf[0]);
    149e:	f8 01       	movw	r30, r16
    14a0:	80 81       	ld	r24, Z
    14a2:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character(buf[1]);
    14a6:	f8 01       	movw	r30, r16
    14a8:	81 81       	ldd	r24, Z+1	; 0x01
    14aa:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character('>');
    14ae:	8e e3       	ldi	r24, 0x3E	; 62
    14b0:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			close_matrix_SPI();
    14b4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) // Exit from state
    14b8:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	61 f4       	brne	.+24     	; 0x14d8 <adjust_mode+0x288>
				{
					beep(buzzer_state);
    14c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    14c4:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    14c8:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	e1 f3       	breq	.-8      	; 0x14c8 <adjust_mode+0x278>
					out_confirm = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    14d6:	d8 c0       	rjmp	.+432    	; 0x1688 <adjust_mode+0x438>
				}
				else if (poll_switch() == SW_ADJUST) 
    14d8:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	61 f4       	brne	.+24     	; 0x14f8 <adjust_mode+0x2a8>
				{
					beep(buzzer_state);
    14e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    14e4:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    14e8:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	e1 f3       	breq	.-8      	; 0x14e8 <adjust_mode+0x298>
				if (ret_value > 31)  ret_value = 1;
    14f0:	c0 32       	cpi	r28, 0x20	; 32
    14f2:	90 f4       	brcc	.+36     	; 0x1518 <adjust_mode+0x2c8>
				else ret_value++;
    14f4:	cf 5f       	subi	r28, 0xFF	; 255
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <adjust_mode+0x2ce>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
    14f8:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	79 f4       	brne	.+30     	; 0x151e <adjust_mode+0x2ce>
			{
				beep(buzzer_state);
    1500:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1504:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
				while(poll_switch() == SW_RGB);
    1508:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	e1 f3       	breq	.-8      	; 0x1508 <adjust_mode+0x2b8>
				if (ret_value <= 1)  ret_value = 31;
    1510:	c2 30       	cpi	r28, 0x02	; 2
    1512:	20 f0       	brcs	.+8      	; 0x151c <adjust_mode+0x2cc>
				else ret_value--;
    1514:	c1 50       	subi	r28, 0x01	; 1
    1516:	03 c0       	rjmp	.+6      	; 0x151e <adjust_mode+0x2ce>
				}
				else if (poll_switch() == SW_ADJUST) 
				{
					beep(buzzer_state);
					while(poll_switch() == SW_ADJUST);
				if (ret_value > 31)  ret_value = 1;
    1518:	c1 e0       	ldi	r28, 0x01	; 1
    151a:	01 c0       	rjmp	.+2      	; 0x151e <adjust_mode+0x2ce>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
			{
				beep(buzzer_state);
				while(poll_switch() == SW_RGB);
				if (ret_value <= 1)  ret_value = 31;
    151c:	cf e1       	ldi	r28, 0x1F	; 31
			}
		}
		break;
		
		case DAY_state:
		while(out_confirm == 0) // Wait until OK
    151e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <adjust_mode+0x2d8>
    1526:	ae cf       	rjmp	.-164    	; 0x1484 <adjust_mode+0x234>
    1528:	af c0       	rjmp	.+350    	; 0x1688 <adjust_mode+0x438>
/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
	uint8_t ret_value = 0;
	out_confirm = 0;
	switch(parameter_in)
    152a:	c0 e0       	ldi	r28, 0x00	; 0
		break;
		
		case MONTH_state:
		while(out_confirm == 0) // Wait until OK
		{
			buf[0] = '1';
    152c:	0b e2       	ldi	r16, 0x2B	; 43
    152e:	12 e0       	ldi	r17, 0x02	; 2
    1530:	0f 2e       	mov	r0, r31
    1532:	f1 e3       	ldi	r31, 0x31	; 49
    1534:	ff 2e       	mov	r15, r31
    1536:	f0 2d       	mov	r31, r0
			buf[1] = '0';
    1538:	d0 e3       	ldi	r29, 0x30	; 48
		break;
		
		case MONTH_state:
		while(out_confirm == 0) // Wait until OK
		{
			buf[0] = '1';
    153a:	f8 01       	movw	r30, r16
    153c:	f0 82       	st	Z, r15
			buf[1] = '0';
    153e:	d1 83       	std	Z+1, r29	; 0x01
			open_matrix_SPI();
    1540:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
			print_string("<MTH:");
    1544:	8b e1       	ldi	r24, 0x1B	; 27
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
			int_to_ascii(ret_value);
    154c:	8c 2f       	mov	r24, r28
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
			Print_Character(buf[0]);
    1554:	f8 01       	movw	r30, r16
    1556:	80 81       	ld	r24, Z
    1558:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character(buf[1]);
    155c:	f8 01       	movw	r30, r16
    155e:	81 81       	ldd	r24, Z+1	; 0x01
    1560:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character('>');
    1564:	8e e3       	ldi	r24, 0x3E	; 62
    1566:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			close_matrix_SPI();
    156a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) // Exit from state
    156e:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	61 f4       	brne	.+24     	; 0x158e <adjust_mode+0x33e>
				{
					beep(buzzer_state);
    1576:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    157a:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    157e:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	e1 f3       	breq	.-8      	; 0x157e <adjust_mode+0x32e>
					out_confirm = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    158c:	7d c0       	rjmp	.+250    	; 0x1688 <adjust_mode+0x438>
				}
				else if (poll_switch() == SW_ADJUST) 
    158e:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	61 f4       	brne	.+24     	; 0x15ae <adjust_mode+0x35e>
				{
					beep(buzzer_state);
    1596:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    159a:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    159e:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	e1 f3       	breq	.-8      	; 0x159e <adjust_mode+0x34e>
				if (ret_value > 12)  ret_value = 1;
    15a6:	cd 30       	cpi	r28, 0x0D	; 13
    15a8:	90 f4       	brcc	.+36     	; 0x15ce <adjust_mode+0x37e>
				else ret_value++;
    15aa:	cf 5f       	subi	r28, 0xFF	; 255
    15ac:	13 c0       	rjmp	.+38     	; 0x15d4 <adjust_mode+0x384>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
    15ae:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	79 f4       	brne	.+30     	; 0x15d4 <adjust_mode+0x384>
			{
				beep(buzzer_state);
    15b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    15ba:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
				while(poll_switch() == SW_RGB);
    15be:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	e1 f3       	breq	.-8      	; 0x15be <adjust_mode+0x36e>
				if (ret_value <= 1)  ret_value = 12;
    15c6:	c2 30       	cpi	r28, 0x02	; 2
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <adjust_mode+0x382>
				else ret_value--;
    15ca:	c1 50       	subi	r28, 0x01	; 1
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <adjust_mode+0x384>
				}
				else if (poll_switch() == SW_ADJUST) 
				{
					beep(buzzer_state);
					while(poll_switch() == SW_ADJUST);
				if (ret_value > 12)  ret_value = 1;
    15ce:	c1 e0       	ldi	r28, 0x01	; 1
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <adjust_mode+0x384>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
			{
				beep(buzzer_state);
				while(poll_switch() == SW_RGB);
				if (ret_value <= 1)  ret_value = 12;
    15d2:	cc e0       	ldi	r28, 0x0C	; 12
			}
		}
		break;
		
		case MONTH_state:
		while(out_confirm == 0) // Wait until OK
    15d4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <adjust_mode+0x38e>
    15dc:	ae cf       	rjmp	.-164    	; 0x153a <adjust_mode+0x2ea>
    15de:	54 c0       	rjmp	.+168    	; 0x1688 <adjust_mode+0x438>
/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
	uint8_t ret_value = 0;
	out_confirm = 0;
	switch(parameter_in)
    15e0:	c0 e0       	ldi	r28, 0x00	; 0
		while(out_confirm == 0) // Wait until OK
		{
			open_matrix_SPI();
			print_string("<Y:20");
			int_to_ascii(ret_value);
			Print_Character(buf[0]);
    15e2:	0b e2       	ldi	r16, 0x2B	; 43
    15e4:	12 e0       	ldi	r17, 0x02	; 2
		break;	
			
		case YEAR_state:
		while(out_confirm == 0) // Wait until OK
		{
			open_matrix_SPI();
    15e6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
			print_string("<Y:20");
    15ea:	81 e2       	ldi	r24, 0x21	; 33
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
			int_to_ascii(ret_value);
    15f2:	8c 2f       	mov	r24, r28
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 1c 05 	call	0xa38	; 0xa38 <int_to_ascii>
			Print_Character(buf[0]);
    15fa:	f8 01       	movw	r30, r16
    15fc:	80 81       	ld	r24, Z
    15fe:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character(buf[1]);
    1602:	f8 01       	movw	r30, r16
    1604:	81 81       	ldd	r24, Z+1	; 0x01
    1606:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			Print_Character('>');
    160a:	8e e3       	ldi	r24, 0x3E	; 62
    160c:	0e 94 03 01 	call	0x206	; 0x206 <Print_Character>
			close_matrix_SPI();
    1610:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				if (poll_switch() == SW_MODE) // Exit from state
    1614:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	61 f4       	brne	.+24     	; 0x1634 <adjust_mode+0x3e4>
				{
					beep(buzzer_state);
    161c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1620:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_MODE);
    1624:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	e1 f3       	breq	.-8      	; 0x1624 <adjust_mode+0x3d4>
					out_confirm = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
    1632:	2a c0       	rjmp	.+84     	; 0x1688 <adjust_mode+0x438>
				}
				else if (poll_switch() == SW_ADJUST)
    1634:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	61 f4       	brne	.+24     	; 0x1654 <adjust_mode+0x404>
				{
					beep(buzzer_state);
    163c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1640:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
					while(poll_switch() == SW_ADJUST);
    1644:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	e1 f3       	breq	.-8      	; 0x1644 <adjust_mode+0x3f4>
				if (ret_value > 99)  ret_value = 0;
    164c:	c4 36       	cpi	r28, 0x64	; 100
    164e:	90 f4       	brcc	.+36     	; 0x1674 <adjust_mode+0x424>
				else ret_value++;
    1650:	cf 5f       	subi	r28, 0xFF	; 255
    1652:	13 c0       	rjmp	.+38     	; 0x167a <adjust_mode+0x42a>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
    1654:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	79 f4       	brne	.+30     	; 0x167a <adjust_mode+0x42a>
			{
				beep(buzzer_state);
    165c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1660:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
				while(poll_switch() == SW_RGB);
    1664:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	e1 f3       	breq	.-8      	; 0x1664 <adjust_mode+0x414>
				if (ret_value <= 0)  ret_value = 99;
    166c:	cc 23       	and	r28, r28
    166e:	21 f0       	breq	.+8      	; 0x1678 <adjust_mode+0x428>
				else ret_value--;
    1670:	c1 50       	subi	r28, 0x01	; 1
    1672:	03 c0       	rjmp	.+6      	; 0x167a <adjust_mode+0x42a>
				}
				else if (poll_switch() == SW_ADJUST)
				{
					beep(buzzer_state);
					while(poll_switch() == SW_ADJUST);
				if (ret_value > 99)  ret_value = 0;
    1674:	c0 e0       	ldi	r28, 0x00	; 0
    1676:	01 c0       	rjmp	.+2      	; 0x167a <adjust_mode+0x42a>
			}
			else if (poll_switch() == SW_RGB) // OK and save appropriate values.
			{
				beep(buzzer_state);
				while(poll_switch() == SW_RGB);
				if (ret_value <= 0)  ret_value = 99;
    1678:	c3 e6       	ldi	r28, 0x63	; 99
			}
		}
		break;	
			
		case YEAR_state:
		while(out_confirm == 0) // Wait until OK
    167a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    167e:	88 23       	and	r24, r24
    1680:	09 f4       	brne	.+2      	; 0x1684 <adjust_mode+0x434>
    1682:	b1 cf       	rjmp	.-158    	; 0x15e6 <adjust_mode+0x396>
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <adjust_mode+0x438>
}

/* Time and date adjust menu mode function */
uint8_t adjust_mode (uint8_t parameter_in)
{
	uint8_t ret_value = 0;
    1686:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
		break;						
	}
	return ret_value;
}
    1688:	8c 2f       	mov	r24, r28
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	08 95       	ret

00001696 <ladder_string_buzzer>:

/* Buzzer menu switching between states */
uint8_t ladder_string_buzzer(uint8_t current_statez, uint8_t operator_in)
{
	uint8_t retvalue = 0;
	switch(current_statez)
    1696:	82 36       	cpi	r24, 0x62	; 98
    1698:	19 f0       	breq	.+6      	; 0x16a0 <ladder_string_buzzer+0xa>
    169a:	83 36       	cpi	r24, 0x63	; 99
    169c:	a9 f0       	breq	.+42     	; 0x16c8 <ladder_string_buzzer+0x32>
    169e:	28 c0       	rjmp	.+80     	; 0x16f0 <ladder_string_buzzer+0x5a>
	{
		case buzzer_on:
		if (operator_in == up)
    16a0:	65 30       	cpi	r22, 0x05	; 5
    16a2:	41 f4       	brne	.+16     	; 0x16b4 <ladder_string_buzzer+0x1e>
		{
			retvalue = buzzer_off;
			strcpy(menu_string, OFFST);
    16a4:	66 e1       	ldi	r22, 0x16	; 22
    16a6:	71 e0       	ldi	r23, 0x01	; 1
    16a8:	84 e0       	ldi	r24, 0x04	; 4
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
	switch(current_statez)
	{
		case buzzer_on:
		if (operator_in == up)
		{
			retvalue = buzzer_off;
    16b0:	83 e6       	ldi	r24, 0x63	; 99
    16b2:	08 95       	ret
			strcpy(menu_string, OFFST);
		}
		if (operator_in == down)
    16b4:	66 30       	cpi	r22, 0x06	; 6
    16b6:	f1 f4       	brne	.+60     	; 0x16f4 <ladder_string_buzzer+0x5e>
		{
			retvalue = buzzer_off;
			strcpy(menu_string, OFFST);
    16b8:	66 e1       	ldi	r22, 0x16	; 22
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	84 e0       	ldi	r24, 0x04	; 4
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = buzzer_off;
			strcpy(menu_string, OFFST);
		}
		if (operator_in == down)
		{
			retvalue = buzzer_off;
    16c4:	83 e6       	ldi	r24, 0x63	; 99
    16c6:	08 95       	ret
			strcpy(menu_string, OFFST);
		}
		break;
		
		case buzzer_off:
		if (operator_in == up)
    16c8:	65 30       	cpi	r22, 0x05	; 5
    16ca:	41 f4       	brne	.+16     	; 0x16dc <ladder_string_buzzer+0x46>
		{
			retvalue = buzzer_on;
			strcpy(menu_string, ONST);
    16cc:	6d e0       	ldi	r22, 0x0D	; 13
    16ce:	71 e0       	ldi	r23, 0x01	; 1
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
		break;
		
		case buzzer_off:
		if (operator_in == up)
		{
			retvalue = buzzer_on;
    16d8:	82 e6       	ldi	r24, 0x62	; 98
    16da:	08 95       	ret
			strcpy(menu_string, ONST);
		}
		if (operator_in == down)
    16dc:	66 30       	cpi	r22, 0x06	; 6
    16de:	61 f4       	brne	.+24     	; 0x16f8 <ladder_string_buzzer+0x62>
		{
			retvalue = buzzer_on;
			strcpy(menu_string, ONST);
    16e0:	6d e0       	ldi	r22, 0x0D	; 13
    16e2:	71 e0       	ldi	r23, 0x01	; 1
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
			retvalue = buzzer_on;
			strcpy(menu_string, ONST);
		}
		if (operator_in == down)
		{
			retvalue = buzzer_on;
    16ec:	82 e6       	ldi	r24, 0x62	; 98
    16ee:	08 95       	ret
}

/* Buzzer menu switching between states */
uint8_t ladder_string_buzzer(uint8_t current_statez, uint8_t operator_in)
{
	uint8_t retvalue = 0;
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	08 95       	ret
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	08 95       	ret
    16f8:	80 e0       	ldi	r24, 0x00	; 0
			strcpy(menu_string, ONST);
		}
		break;
	}
	return retvalue;
}
    16fa:	08 95       	ret

000016fc <menu_mode_buzzer>:

/* Buzzer menu mode function */
uint8_t menu_mode_buzzer (void)
{
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
	uint8_t current_state = buzzer_on;
	//	uint8_t ret_val = 0;
	strcpy(menu_string,ONST);
    1704:	6d e0       	ldi	r22, 0x0D	; 13
    1706:	71 e0       	ldi	r23, 0x01	; 1
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strcpy>
}

/* Buzzer menu mode function */
uint8_t menu_mode_buzzer (void)
{
	uint8_t current_state = buzzer_on;
    1710:	d2 e6       	ldi	r29, 0x62	; 98
    1712:	10 e0       	ldi	r17, 0x00	; 0
		
		if (poll_switch() == SW_MODE)
		{
			beep(buzzer_state);
			while(poll_switch() == SW_MODE);
			out_confirm_x = 1;
    1714:	01 e0       	ldi	r16, 0x01	; 1
	//	uint8_t ret_val = 0;
	strcpy(menu_string,ONST);
	uint8_t out_confirm_x = 0;
	while(out_confirm_x == 0)
	{
		open_matrix_SPI();
    1716:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
		print_string(menu_string);
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0e 94 80 02 	call	0x500	; 0x500 <print_string>
		close_matrix_SPI();
    1722:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
		
		if (poll_switch() == SW_MODE)
    1726:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	51 f4       	brne	.+20     	; 0x1742 <menu_mode_buzzer+0x46>
		{
			beep(buzzer_state);
    172e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1732:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_MODE);
    1736:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	e1 f3       	breq	.-8      	; 0x1736 <menu_mode_buzzer+0x3a>
			out_confirm_x = 1;
    173e:	c0 2f       	mov	r28, r16
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <menu_mode_buzzer+0x48>
    1742:	c1 2f       	mov	r28, r17
		}
		if (poll_switch() == SW_ADJUST)
    1744:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	71 f4       	brne	.+28     	; 0x1768 <menu_mode_buzzer+0x6c>
		{
			beep(buzzer_state);
    174c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1750:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_ADJUST);
    1754:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    1758:	82 30       	cpi	r24, 0x02	; 2
    175a:	e1 f3       	breq	.-8      	; 0x1754 <menu_mode_buzzer+0x58>
			current_state = ladder_string_buzzer(current_state, up);
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	8d 2f       	mov	r24, r29
    1760:	0e 94 4b 0b 	call	0x1696	; 0x1696 <ladder_string_buzzer>
    1764:	d8 2f       	mov	r29, r24
    1766:	11 c0       	rjmp	.+34     	; 0x178a <menu_mode_buzzer+0x8e>
		}
		else if (poll_switch() == SW_RGB)
    1768:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	69 f4       	brne	.+26     	; 0x178a <menu_mode_buzzer+0x8e>
		{
			beep(buzzer_state);
    1770:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    1774:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_RGB);
    1778:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	e1 f3       	breq	.-8      	; 0x1778 <menu_mode_buzzer+0x7c>
			current_state = ladder_string_buzzer(current_state, down);
    1780:	66 e0       	ldi	r22, 0x06	; 6
    1782:	8d 2f       	mov	r24, r29
    1784:	0e 94 4b 0b 	call	0x1696	; 0x1696 <ladder_string_buzzer>
    1788:	d8 2f       	mov	r29, r24
{
	uint8_t current_state = buzzer_on;
	//	uint8_t ret_val = 0;
	strcpy(menu_string,ONST);
	uint8_t out_confirm_x = 0;
	while(out_confirm_x == 0)
    178a:	cc 23       	and	r28, r28
    178c:	21 f2       	breq	.-120    	; 0x1716 <menu_mode_buzzer+0x1a>
			beep(buzzer_state);
			while(poll_switch() == SW_RGB);
			current_state = ladder_string_buzzer(current_state, down);
		}
	}
	buzzer_state = current_state;
    178e:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <buzzer_state>
	return current_state;
}
    1792:	8d 2f       	mov	r24, r29
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <main>:

/* Main function */
int main (void)
{	
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	28 97       	sbiw	r28, 0x08	; 8
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
	Init_Device();						// Device initialization
    17b2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Init_Device>
	uint8_t RGB_out = PWM_mode;			// Default RGB mode.
	uint8_t DISPLAY_out = time_mode;	// Default time displaying mode.
	struct rtc_time ds1302;				// DS1302 semi-"class" Definition
	struct rtc_time *rtc;
	rtc = &ds1302;
	ds1302_init();						// DS1302 initialization
    17b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <ds1302_init>
	ds1302_update(rtc);					// update all fields in the struct
    17ba:	ce 01       	movw	r24, r28
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	0e 94 b8 04 	call	0x970	; 0x970 <ds1302_update>
	ds1302_update_time(rtc, HOUR);		// Get HOUR value
    17c2:	66 e1       	ldi	r22, 0x16	; 22
    17c4:	ce 01       	movw	r24, r28
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
	greetings(rtc->hour);				// Greetings according to the daytime.
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	0e 94 dd 04 	call	0x9ba	; 0x9ba <greetings>
	Init_Device();						// Device initialization
	unsigned char sec, temp;			// used variables
	uint16_t color_cnt = 0;				// used variable
	unsigned long display_cnt = 0;		// used variable
	uint8_t RGB_out = PWM_mode;			// Default RGB mode.
	uint8_t DISPLAY_out = time_mode;	// Default time displaying mode.
    17d2:	0f e5       	ldi	r16, 0x5F	; 95
{	
	Init_Device();						// Device initialization
	unsigned char sec, temp;			// used variables
	uint16_t color_cnt = 0;				// used variable
	unsigned long display_cnt = 0;		// used variable
	uint8_t RGB_out = PWM_mode;			// Default RGB mode.
    17d4:	1a e5       	ldi	r17, 0x5A	; 90
int main (void)
{	
	Init_Device();						// Device initialization
	unsigned char sec, temp;			// used variables
	uint16_t color_cnt = 0;				// used variable
	unsigned long display_cnt = 0;		// used variable
    17d6:	81 2c       	mov	r8, r1
    17d8:	91 2c       	mov	r9, r1
    17da:	54 01       	movw	r10, r8
/* Main function */
int main (void)
{	
	Init_Device();						// Device initialization
	unsigned char sec, temp;			// used variables
	uint16_t color_cnt = 0;				// used variable
    17dc:	e1 2c       	mov	r14, r1
    17de:	f1 2c       	mov	r15, r1
	ds1302_update(rtc);					// update all fields in the struct
	ds1302_update_time(rtc, HOUR);		// Get HOUR value
	greetings(rtc->hour);				// Greetings according to the daytime.
	while (1)							// Infinite loop
	{
		if (poll_switch() == SW_MODE) // Check PB state
    17e0:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	09 f0       	breq	.+2      	; 0x17ea <main+0x4c>
    17e8:	80 c0       	rjmp	.+256    	; 0x18ea <main+0x14c>
		{
			beep(buzzer_state);
    17ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buzzer_state>
    17ee:	0e 94 f8 07 	call	0xff0	; 0xff0 <beep>
			while(poll_switch() == SW_MODE);
    17f2:	0e 94 2c 06 	call	0xc58	; 0xc58 <poll_switch>
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	e1 f3       	breq	.-8      	; 0x17f2 <main+0x54>
			switch(menu_mode())
    17fa:	0e 94 0e 08 	call	0x101c	; 0x101c <menu_mode>
    17fe:	86 36       	cpi	r24, 0x66	; 102
    1800:	09 f4       	brne	.+2      	; 0x1804 <main+0x66>
    1802:	5f c0       	rjmp	.+190    	; 0x18c2 <main+0x124>
    1804:	30 f4       	brcc	.+12     	; 0x1812 <main+0x74>
    1806:	84 36       	cpi	r24, 0x64	; 100
    1808:	59 f0       	breq	.+22     	; 0x1820 <main+0x82>
    180a:	85 36       	cpi	r24, 0x65	; 101
    180c:	09 f4       	brne	.+2      	; 0x1810 <main+0x72>
    180e:	51 c0       	rjmp	.+162    	; 0x18b2 <main+0x114>
    1810:	6c c0       	rjmp	.+216    	; 0x18ea <main+0x14c>
    1812:	87 36       	cpi	r24, 0x67	; 103
    1814:	09 f4       	brne	.+2      	; 0x1818 <main+0x7a>
    1816:	51 c0       	rjmp	.+162    	; 0x18ba <main+0x11c>
    1818:	88 36       	cpi	r24, 0x68	; 104
    181a:	09 f4       	brne	.+2      	; 0x181e <main+0x80>
    181c:	62 c0       	rjmp	.+196    	; 0x18e2 <main+0x144>
    181e:	65 c0       	rjmp	.+202    	; 0x18ea <main+0x14c>
			{
				case MENU_ADJUST:
					ds1302_set_time(rtc, SEC, adjust_mode(SEC_state));
    1820:	8e e1       	ldi	r24, 0x1E	; 30
    1822:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    1826:	48 2f       	mov	r20, r24
    1828:	64 e1       	ldi	r22, 0x14	; 20
    182a:	ce 01       	movw	r24, r28
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ds1302_set_time>
					ds1302_set_time(rtc, MIN, adjust_mode(MIN_state));
    1832:	8f e1       	ldi	r24, 0x1F	; 31
    1834:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    1838:	48 2f       	mov	r20, r24
    183a:	65 e1       	ldi	r22, 0x15	; 21
    183c:	ce 01       	movw	r24, r28
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ds1302_set_time>
					ds1302_set_time(rtc, HOUR, adjust_mode(HOUR_state));
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    184a:	48 2f       	mov	r20, r24
    184c:	66 e1       	ldi	r22, 0x16	; 22
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ds1302_set_time>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1856:	2f e7       	ldi	r18, 0x7F	; 127
    1858:	88 e3       	ldi	r24, 0x38	; 56
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	21 50       	subi	r18, 0x01	; 1
    185e:	80 40       	sbci	r24, 0x00	; 0
    1860:	90 40       	sbci	r25, 0x00	; 0
    1862:	e1 f7       	brne	.-8      	; 0x185c <main+0xbe>
    1864:	00 c0       	rjmp	.+0      	; 0x1866 <main+0xc8>
    1866:	00 00       	nop
					_delay_ms(50);
					ds1302_set_time(rtc, DATE, adjust_mode(DAY_state));
    1868:	81 e2       	ldi	r24, 0x21	; 33
    186a:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    186e:	48 2f       	mov	r20, r24
    1870:	67 e1       	ldi	r22, 0x17	; 23
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ds1302_set_time>
    187a:	2f e7       	ldi	r18, 0x7F	; 127
    187c:	88 e3       	ldi	r24, 0x38	; 56
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	21 50       	subi	r18, 0x01	; 1
    1882:	80 40       	sbci	r24, 0x00	; 0
    1884:	90 40       	sbci	r25, 0x00	; 0
    1886:	e1 f7       	brne	.-8      	; 0x1880 <main+0xe2>
    1888:	00 c0       	rjmp	.+0      	; 0x188a <main+0xec>
    188a:	00 00       	nop
					_delay_ms(50);
					ds1302_set_time(rtc, MONTH, adjust_mode(MONTH_state));
    188c:	82 e2       	ldi	r24, 0x22	; 34
    188e:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    1892:	48 2f       	mov	r20, r24
    1894:	68 e1       	ldi	r22, 0x18	; 24
    1896:	ce 01       	movw	r24, r28
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ds1302_set_time>
    189e:	2f e7       	ldi	r18, 0x7F	; 127
    18a0:	88 e3       	ldi	r24, 0x38	; 56
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	21 50       	subi	r18, 0x01	; 1
    18a6:	80 40       	sbci	r24, 0x00	; 0
    18a8:	90 40       	sbci	r25, 0x00	; 0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <main+0x106>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <main+0x110>
    18ae:	00 00       	nop
    18b0:	1c c0       	rjmp	.+56     	; 0x18ea <main+0x14c>
					_delay_ms(50);					
					break;
					
				case MENU_COLORS:
					RGB_out = menu_mode_color();
    18b2:	0e 94 a1 08 	call	0x1142	; 0x1142 <menu_mode_color>
    18b6:	18 2f       	mov	r17, r24
					break;
    18b8:	18 c0       	rjmp	.+48     	; 0x18ea <main+0x14c>
					
				case MENU_DISPLAY:
					DISPLAY_out = menu_mode_display();
    18ba:	0e 94 52 08 	call	0x10a4	; 0x10a4 <menu_mode_display>
    18be:	08 2f       	mov	r16, r24
					break;
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <main+0x14c>
					
				case MENU_ALARM:
					sec_alarm = adjust_mode(SEC_state);
    18c2:	8e e1       	ldi	r24, 0x1E	; 30
    18c4:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    18c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sec_alarm>
					min_alarm = adjust_mode(MIN_state);
    18cc:	8f e1       	ldi	r24, 0x1F	; 31
    18ce:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    18d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <min_alarm>
					hour_alarm = adjust_mode(HOUR_state);
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	0e 94 28 09 	call	0x1250	; 0x1250 <adjust_mode>
    18dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					break;
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <main+0x14c>
					
				case MENU_BUZZER:
					buzzer_state = menu_mode_buzzer();
    18e2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <menu_mode_buzzer>
    18e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <buzzer_state>
				default: break;
			}
		}
		
/* RGB LED Controller */
		switch(RGB_out)
    18ea:	1c 35       	cpi	r17, 0x5C	; 92
    18ec:	89 f0       	breq	.+34     	; 0x1910 <main+0x172>
    18ee:	28 f4       	brcc	.+10     	; 0x18fa <main+0x15c>
    18f0:	1a 35       	cpi	r17, 0x5A	; 90
    18f2:	d1 f0       	breq	.+52     	; 0x1928 <main+0x18a>
    18f4:	1b 35       	cpi	r17, 0x5B	; 91
    18f6:	31 f0       	breq	.+12     	; 0x1904 <main+0x166>
    18f8:	2a c0       	rjmp	.+84     	; 0x194e <main+0x1b0>
    18fa:	1d 35       	cpi	r17, 0x5D	; 93
    18fc:	79 f0       	breq	.+30     	; 0x191c <main+0x17e>
    18fe:	1e 35       	cpi	r17, 0x5E	; 94
    1900:	09 f1       	breq	.+66     	; 0x1944 <main+0x1a6>
    1902:	25 c0       	rjmp	.+74     	; 0x194e <main+0x1b0>
		{
			case R_mode: 
			stop_timers();
    1904:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
				PORTD |=  (1 << RED);
    1908:	5d 9a       	sbi	0x0b, 5	; 11
				PORTD &= ~(1 << GREEN);
    190a:	5e 98       	cbi	0x0b, 6	; 11
				PORTB &= ~(1 << BLUE);
    190c:	29 98       	cbi	0x05, 1	; 5
				break;
    190e:	1f c0       	rjmp	.+62     	; 0x194e <main+0x1b0>
			case G_mode:
			stop_timers();
    1910:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
				PORTD &=  ~(1 << RED);
    1914:	5d 98       	cbi	0x0b, 5	; 11
				PORTD |= (1 << GREEN);
    1916:	5e 9a       	sbi	0x0b, 6	; 11
				PORTB &= ~(1 << BLUE);
    1918:	29 98       	cbi	0x05, 1	; 5
				break;
    191a:	19 c0       	rjmp	.+50     	; 0x194e <main+0x1b0>
			case B_mode:
			stop_timers();
    191c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
				PORTD &=  ~(1 << RED);
    1920:	5d 98       	cbi	0x0b, 5	; 11
				PORTD &= ~(1 << GREEN);
    1922:	5e 98       	cbi	0x0b, 6	; 11
				PORTB |= (1 << BLUE);
    1924:	29 9a       	sbi	0x05, 1	; 5
				break;
    1926:	13 c0       	rjmp	.+38     	; 0x194e <main+0x1b0>
			case PWM_mode:
				showRGB(color_cnt);
    1928:	c7 01       	movw	r24, r14
    192a:	0e 94 03 06 	call	0xc06	; 0xc06 <showRGB>
				if (color_cnt == 767) color_cnt = 0;
    192e:	2f ef       	ldi	r18, 0xFF	; 255
    1930:	e2 16       	cp	r14, r18
    1932:	22 e0       	ldi	r18, 0x02	; 2
    1934:	f2 06       	cpc	r15, r18
    1936:	11 f4       	brne	.+4      	; 0x193c <main+0x19e>
    1938:	e1 2c       	mov	r14, r1
    193a:	f1 2c       	mov	r15, r1
				color_cnt++;
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	e8 1a       	sub	r14, r24
    1940:	f8 0a       	sbc	r15, r24
				break;
    1942:	05 c0       	rjmp	.+10     	; 0x194e <main+0x1b0>
			case off_mode:
				stop_timers();
    1944:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <stop_timers>
				PORTD &= ~(1 << RED);
    1948:	5d 98       	cbi	0x0b, 5	; 11
				PORTD &= ~(1 << GREEN);
    194a:	5e 98       	cbi	0x0b, 6	; 11
				PORTB &= ~(1 << BLUE);	
    194c:	29 98       	cbi	0x05, 1	; 5
			default: break;						
		}

/* Display Controller */

		switch(DISPLAY_out)
    194e:	00 36       	cpi	r16, 0x60	; 96
    1950:	09 f1       	breq	.+66     	; 0x1994 <main+0x1f6>
    1952:	01 36       	cpi	r16, 0x61	; 97
    1954:	a1 f1       	breq	.+104    	; 0x19be <main+0x220>
    1956:	0f 35       	cpi	r16, 0x5F	; 95
    1958:	09 f0       	breq	.+2      	; 0x195c <main+0x1be>
    195a:	7e c0       	rjmp	.+252    	; 0x1a58 <main+0x2ba>
		{
			case time_mode:
			ds1302_update_time(rtc, SEC);
    195c:	64 e1       	ldi	r22, 0x14	; 20
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
			ds1302_update_time(rtc, MIN);
    1966:	65 e1       	ldi	r22, 0x15	; 21
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
			ds1302_update_time(rtc, HOUR);
    1970:	66 e1       	ldi	r22, 0x16	; 22
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
				open_matrix_SPI();
    197a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
				print_time_string(rtc->second,rtc->minute,rtc->hour);
    197e:	4b 81       	ldd	r20, Y+3	; 0x03
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	6a 81       	ldd	r22, Y+2	; 0x02
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 36 05 	call	0xa6c	; 0xa6c <print_time_string>
				close_matrix_SPI();	
    198e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				break;
    1992:	62 c0       	rjmp	.+196    	; 0x1a58 <main+0x2ba>
				
			case date_mode:
				ds1302_update_time(rtc, DATE);
    1994:	67 e1       	ldi	r22, 0x17	; 23
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
				ds1302_update_time(rtc, MONTH);
    199e:	68 e1       	ldi	r22, 0x18	; 24
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
				open_matrix_SPI();
    19a8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
				print_date_string(rtc->date,rtc->month);
    19ac:	6e 81       	ldd	r22, Y+6	; 0x06
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 af 05 	call	0xb5e	; 0xb5e <print_date_string>
				close_matrix_SPI();
    19b8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				break;
    19bc:	4d c0       	rjmp	.+154    	; 0x1a58 <main+0x2ba>
				
			case both_mode:

				open_matrix_SPI();
    19be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <open_matrix_SPI>
				if (display_cnt < 400) 
    19c2:	90 e9       	ldi	r25, 0x90	; 144
    19c4:	89 16       	cp	r8, r25
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    19c8:	99 06       	cpc	r9, r25
    19ca:	a1 04       	cpc	r10, r1
    19cc:	b1 04       	cpc	r11, r1
    19ce:	18 f5       	brcc	.+70     	; 0x1a16 <main+0x278>
				{
				ds1302_update_time(rtc, SEC);
    19d0:	64 e1       	ldi	r22, 0x14	; 20
    19d2:	ce 01       	movw	r24, r28
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
				ds1302_update_time(rtc, MIN);
    19da:	65 e1       	ldi	r22, 0x15	; 21
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
				ds1302_update_time(rtc, HOUR);
    19e4:	66 e1       	ldi	r22, 0x16	; 22
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
				print_time_string(rtc->second,rtc->minute,rtc->hour);
    19ee:	4b 81       	ldd	r20, Y+3	; 0x03
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	6a 81       	ldd	r22, Y+2	; 0x02
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 36 05 	call	0xa6c	; 0xa6c <print_time_string>
				display_cnt++;
    19fe:	2f ef       	ldi	r18, 0xFF	; 255
    1a00:	82 1a       	sub	r8, r18
    1a02:	92 0a       	sbc	r9, r18
    1a04:	a2 0a       	sbc	r10, r18
    1a06:	b2 0a       	sbc	r11, r18
				}
				if (display_cnt >= 400)
    1a08:	80 e9       	ldi	r24, 0x90	; 144
    1a0a:	88 16       	cp	r8, r24
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	98 06       	cpc	r9, r24
    1a10:	a1 04       	cpc	r10, r1
    1a12:	b1 04       	cpc	r11, r1
    1a14:	f8 f0       	brcs	.+62     	; 0x1a54 <main+0x2b6>
				{
					ds1302_update_time(rtc, DATE);
    1a16:	67 e1       	ldi	r22, 0x17	; 23
    1a18:	ce 01       	movw	r24, r28
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
					ds1302_update_time(rtc, MONTH);
    1a20:	68 e1       	ldi	r22, 0x18	; 24
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 b3 04 	call	0x966	; 0x966 <ds1302_update_time>
					display_cnt++;
    1a2a:	9f ef       	ldi	r25, 0xFF	; 255
    1a2c:	89 1a       	sub	r8, r25
    1a2e:	99 0a       	sbc	r9, r25
    1a30:	a9 0a       	sbc	r10, r25
    1a32:	b9 0a       	sbc	r11, r25
					print_date_string(rtc->date,rtc->month);
    1a34:	6e 81       	ldd	r22, Y+6	; 0x06
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 af 05 	call	0xb5e	; 0xb5e <print_date_string>
					if (display_cnt == 800) display_cnt = 0;
    1a40:	20 e2       	ldi	r18, 0x20	; 32
    1a42:	82 16       	cp	r8, r18
    1a44:	23 e0       	ldi	r18, 0x03	; 3
    1a46:	92 06       	cpc	r9, r18
    1a48:	a1 04       	cpc	r10, r1
    1a4a:	b1 04       	cpc	r11, r1
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <main+0x2b6>
    1a4e:	81 2c       	mov	r8, r1
    1a50:	91 2c       	mov	r9, r1
    1a52:	54 01       	movw	r10, r8
					
				}
				close_matrix_SPI();
    1a54:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <close_matrix_SPI>
				
			default: break;						
		}
		
		/* Alarm compare code block */
		if ( (hour_alarm == rtc->hour) && (min_alarm == rtc->minute) && (sec_alarm == rtc->second) ) alarm_begin();
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a5e:	98 13       	cpse	r25, r24
    1a60:	bf ce       	rjmp	.-642    	; 0x17e0 <main+0x42>
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <min_alarm>
    1a68:	98 13       	cpse	r25, r24
    1a6a:	ba ce       	rjmp	.-652    	; 0x17e0 <main+0x42>
    1a6c:	99 81       	ldd	r25, Y+1	; 0x01
    1a6e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sec_alarm>
    1a72:	98 13       	cpse	r25, r24
    1a74:	b5 ce       	rjmp	.-662    	; 0x17e0 <main+0x42>
    1a76:	0e 94 ae 07 	call	0xf5c	; 0xf5c <alarm_begin>
    1a7a:	b2 ce       	rjmp	.-668    	; 0x17e0 <main+0x42>

00001a7c <__divmodhi4>:
    1a7c:	97 fb       	bst	r25, 7
    1a7e:	07 2e       	mov	r0, r23
    1a80:	16 f4       	brtc	.+4      	; 0x1a86 <__divmodhi4+0xa>
    1a82:	00 94       	com	r0
    1a84:	07 d0       	rcall	.+14     	; 0x1a94 <__divmodhi4_neg1>
    1a86:	77 fd       	sbrc	r23, 7
    1a88:	09 d0       	rcall	.+18     	; 0x1a9c <__divmodhi4_neg2>
    1a8a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__udivmodhi4>
    1a8e:	07 fc       	sbrc	r0, 7
    1a90:	05 d0       	rcall	.+10     	; 0x1a9c <__divmodhi4_neg2>
    1a92:	3e f4       	brtc	.+14     	; 0x1aa2 <__divmodhi4_exit>

00001a94 <__divmodhi4_neg1>:
    1a94:	90 95       	com	r25
    1a96:	81 95       	neg	r24
    1a98:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9a:	08 95       	ret

00001a9c <__divmodhi4_neg2>:
    1a9c:	70 95       	com	r23
    1a9e:	61 95       	neg	r22
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255

00001aa2 <__divmodhi4_exit>:
    1aa2:	08 95       	ret

00001aa4 <__tablejump2__>:
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	05 90       	lpm	r0, Z+
    1aaa:	f4 91       	lpm	r31, Z
    1aac:	e0 2d       	mov	r30, r0
    1aae:	09 94       	ijmp

00001ab0 <__udivmodhi4>:
    1ab0:	aa 1b       	sub	r26, r26
    1ab2:	bb 1b       	sub	r27, r27
    1ab4:	51 e1       	ldi	r21, 0x11	; 17
    1ab6:	07 c0       	rjmp	.+14     	; 0x1ac6 <__udivmodhi4_ep>

00001ab8 <__udivmodhi4_loop>:
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	a6 17       	cp	r26, r22
    1abe:	b7 07       	cpc	r27, r23
    1ac0:	10 f0       	brcs	.+4      	; 0x1ac6 <__udivmodhi4_ep>
    1ac2:	a6 1b       	sub	r26, r22
    1ac4:	b7 0b       	sbc	r27, r23

00001ac6 <__udivmodhi4_ep>:
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	5a 95       	dec	r21
    1acc:	a9 f7       	brne	.-22     	; 0x1ab8 <__udivmodhi4_loop>
    1ace:	80 95       	com	r24
    1ad0:	90 95       	com	r25
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	08 95       	ret

00001ad8 <strcpy>:
    1ad8:	fb 01       	movw	r30, r22
    1ada:	dc 01       	movw	r26, r24
    1adc:	01 90       	ld	r0, Z+
    1ade:	0d 92       	st	X+, r0
    1ae0:	00 20       	and	r0, r0
    1ae2:	e1 f7       	brne	.-8      	; 0x1adc <strcpy+0x4>
    1ae4:	08 95       	ret

00001ae6 <_exit>:
    1ae6:	f8 94       	cli

00001ae8 <__stop_program>:
    1ae8:	ff cf       	rjmp	.-2      	; 0x1ae8 <__stop_program>
